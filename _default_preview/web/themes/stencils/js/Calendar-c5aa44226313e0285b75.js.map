{"version":3,"file":"js/Calendar-c5aa44226313e0285b75.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/button-menu/jsx/button-menu.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/dateControlHeader.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/event-types/BaseCalendarEvent.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/event-types/AssignmentCalendarEvent.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/event-types/EventTypes.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/dayView.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/weekView.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/monthView.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/scheduleView.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/calendar.jsx","webpack://Plug-and-Play-Template/./src/modules/calendar/jsx/useResizeObserver.jsx","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx"],"sourcesContent":["/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, createRef } from 'react';\nimport { useFocusWithin, useKeyboard } from '@react-aria/interactions';\n\nexport default function ButtonMenu({\n    uniqueId,\n    icon,\n    iconTitle,\n    text,\n    children,\n    className,\n}) {\n    const buttonRef = createRef();\n    const [isOpen, setIsOpen] = useState(false);\n\n    // Watch the focus and blur on the menu and close if focus leaves the control\n    const { focusWithinProps } = useFocusWithin({\n        onBlurWithin: () => {\n            setIsOpen(false);\n        },\n    });\n\n    // Listen for Esc key within this element\n    const { keyboardProps } = useKeyboard({\n        onKeyDown: (e) => {\n            if (isOpen && e.key === 'Escape') {\n                setIsOpen(false);\n                buttonRef.current.focus(); // Restore focus to the element which opened the menu\n            }\n        },\n    });\n\n    // Wrap the children onClick so the menu can be closed at the same time\n    const modifiedChildren = React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n                onClick: () => {\n                    setIsOpen(false);\n                    buttonRef.current.focus(); // Restore focus to the element which opened the menu\n                    child.props.onClick();\n                },\n            });\n        }\n        return child;\n    });\n\n    return (\n        <div\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...focusWithinProps}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...keyboardProps}\n            className={`button-menu ${className}`}\n        >\n            <button\n                ref={buttonRef}\n                type=\"button\"\n                aria-expanded={isOpen}\n                aria-controls={`${uniqueId}-button-menu-menu`}\n                onClick={() => setIsOpen(!isOpen)}\n                className=\"button-menu__button\"\n            >\n                {icon && (\n                    <svg className=\"svg-icon button-menu__icon\">\n                        {iconTitle && <title>{iconTitle}</title>}\n                        <use href={`#${icon}`} />\n                    </svg>\n                )}\n                {text && <span className=\"button-menu__label\">{text}</span>}\n            </button>\n            <ul\n                id={`${uniqueId}-button-menu-menu`}\n                className={`button-menu__menu ${\n                    isOpen ? 'button-menu__menu--open' : ''\n                }`}\n            >\n                {modifiedChildren}\n            </ul>\n        </div>\n    );\n}\n\nexport function ButtonMenuItem({ label, onClick }) {\n    return (\n        <li className=\"button-menu__item\">\n            <button\n                type=\"button\"\n                onClick={onClick}\n                className=\"button-menu__item-select\"\n            >\n                <span className=\"button-menu__item-label\">{label}</span>\n            </button>\n        </li>\n    );\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, createRef } from 'react';\n\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport { useFocusWithin, useKeyboard } from '@react-aria/interactions';\nimport { getDaysInMonth, addMonths } from 'date-fns';\nimport { CalendarViews } from './enums';\n\nexport default function DateControlHeader({ date, viewType, onDateChange }) {\n    const datePickerButtonRef = createRef();\n    const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\n    let daySkipForward = 1;\n    let daySkipBack = -1;\n\n    if (viewType === CalendarViews.Week) {\n        daySkipForward = 7;\n        daySkipBack = -7;\n    } else if (viewType === CalendarViews.Month) {\n        daySkipForward = getDaysInMonth(date); // Going forward need to add this months days\n        daySkipBack = getDaysInMonth(addMonths(date, -1)) * -1; // Going back need to subtract last months days\n    }\n\n    // Handlers for changing the date via the header buttons\n    const addDaysToDate = ({ numberOfDays }) => {\n        const newDate = new Date(date);\n        newDate.setDate(newDate.getDate() + numberOfDays);\n        onDateChange(newDate);\n    };\n    const handleSetDateToday = () => {\n        onDateChange(new Date());\n    };\n    const handleDatePickerSelected = (selectedDate) => {\n        onDateChange(selectedDate);\n        setIsDatePickerOpen(false);\n        // Restore focus to the element which opened the picker\n        datePickerButtonRef.current.focus();\n    };\n\n    // Watch the focus and blur on the date picker and close if focus leaves the control\n    const { focusWithinProps } = useFocusWithin({\n        onBlurWithin: () => {\n            setIsDatePickerOpen(false);\n        },\n    });\n    // Listen for Esc key within the date picker\n    const { keyboardProps } = useKeyboard({\n        onKeyDown: (e) => {\n            if (isDatePickerOpen && e.key === 'Escape') {\n                setIsDatePickerOpen(false);\n                // Restore focus to the element which opened the picker\n                datePickerButtonRef.current.focus();\n            }\n        },\n    });\n\n    return (\n        <div className=\"calendar-sub-header\">\n            <div\n                // eslint-disable-next-line react/jsx-props-no-spreading\n                {...focusWithinProps}\n                // eslint-disable-next-line react/jsx-props-no-spreading\n                {...keyboardProps}\n                className=\"calendar-date-picker\"\n            >\n                <button\n                    ref={datePickerButtonRef}\n                    type=\"button\"\n                    onClick={() => setIsDatePickerOpen(!isDatePickerOpen)}\n                    className=\"calendar-date-picker__button\"\n                >\n                    <span className=\"calendar-date-picker__button-aria\">\n                        Toggle date picker\n                    </span>\n                    {date.toLocaleDateString(undefined, {\n                        year: 'numeric',\n                        month: 'short',\n                        day: 'numeric',\n                    })}\n                    <svg aria-hidden className=\"svg-icon svg-icon--small\">\n                        <use href=\"#chevron\" />\n                    </svg>\n                </button>\n                <div\n                    className={`calendar-date-picker__picker ${\n                        isDatePickerOpen\n                            ? 'calendar-date-picker__picker--open'\n                            : ''\n                    }`}\n                >\n                    <DayPicker onDayClick={handleDatePickerSelected} />\n                </div>\n            </div>\n            <div className=\"calendar-sub-header__date-controls\">\n                <button\n                    type=\"button\"\n                    onClick={handleSetDateToday}\n                    className=\"calendar-sub-header__date-action\"\n                >\n                    Today\n                </button>\n\n                <button\n                    type=\"button\"\n                    onClick={() => addDaysToDate({ numberOfDays: daySkipBack })}\n                    className=\"calendar-sub-header__date-action\"\n                >\n                    <svg className=\"svg-icon svg-icon--small svg-icon--previous\">\n                        <title>Previous day</title>\n                        <use href=\"#chevron\" />\n                    </svg>\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={() =>\n                        addDaysToDate({ numberOfDays: daySkipForward })\n                    }\n                    className=\"calendar-sub-header__date-action\"\n                >\n                    <svg className=\"svg-icon svg-icon--small svg-icon--next\">\n                        <title>Next day</title>\n                        <use href=\"#chevron\" />\n                    </svg>\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { formatDate } from '@fullcalendar/react';\n\n/**\n * BaseCalendarEvent which contains the generic event rendering templates used within the application\n * for the various Full Calendar view render hooks and the onClick modal view.\n */\nexport default class BaseCalendarEvent {\n    constructor(event, fcEvent) {\n        this.event = event; // This is always the full payload from the data source, NEVER the fcEvent\n        this.fcEvent = fcEvent; // Optional\n    }\n\n    /**\n     * Get the title to use in the event render\n     * @returns {string} title to use in FullCalendar event displays\n     */\n    getCalendarItemTitle() {\n        return this.event.title;\n    }\n\n    /**\n     * Get the Full Calendar event content for the DayView\n     * @returns {JSX Object} content\n     */\n    getDayViewContent() {\n        const title = this.getCalendarItemTitle();\n        let { start, end } = this.event;\n        const {\n            allDay,\n            type,\n            icon,\n            iconAlt,\n            description,\n            duration,\n            bannerHighlight, // True when a user clicks the top 'banner' to highlight counted events\n            recurrence,\n        } = this.event;\n\n        const isRecurring = recurrence && recurrence.length !== 0;\n        if (isRecurring) {\n            ({ start, end } = this.fcEvent); // Just a destruction without a declaration (let/const)\n        }\n\n        // Get string formatted dates for screen reader sections of event details\n        const startTime = formatDate(start, {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: false,\n        });\n        const endTime =\n            end &&\n            formatDate(end, {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: false,\n            });\n\n        return (\n            <div\n                className={`calendar-event ${\n                    bannerHighlight ? 'calendar-event--highlightable' : ''\n                } ${type ? `calendar-event--${type}` : ''}`}\n            >\n                <div className=\"calendar-event__header\">\n                    {icon && (\n                        <svg className=\"svg-icon\">\n                            {iconAlt && <title>{iconAlt}</title>}\n                            <use href={`#${icon}`} />\n                        </svg>\n                    )}\n                    <span className=\"calendar-event__title\">{title}</span>\n                </div>\n\n                {/* This section is hidden using 'visuallyhidden' */}\n                <div className=\"calendar-event__time\">\n                    {allDay && `All day event`}\n                    {!allDay && <time dateTime={startTime}>{startTime}</time>}\n                    {!allDay && endTime && ` to `}\n                    {!allDay && endTime && (\n                        <time dateTime={endTime}>{endTime}</time>\n                    )}\n                </div>\n\n                {(!duration || duration >= 900000) && ( // Briefer events dont have space to fit the description\n                    <div className=\"calendar-event__description\">\n                        {description}\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    onScheduleViewContentKeyDown(e, onClick) {\n        if (e.key === 'Enter') {\n            onClick({ el: undefined, event: this.fcEvent });\n        }\n    }\n\n    getScheduleViewContent({ onClick }) {\n        const title = this.getCalendarItemTitle();\n        let { start, end } = this.event;\n        const { allDay, icon, iconAlt, recurrence } = this.event;\n\n        const isRecurring = recurrence && recurrence.length !== 0;\n        if (isRecurring) {\n            ({ start, end } = this.fcEvent); // Just a destruction without a declaration (let/const)\n        }\n\n        // Get string formatted dates for screen reader sections of event details\n        let startTime = formatDate(start, {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: false,\n        });\n        let endTime =\n            end &&\n            formatDate(end, {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: false,\n            });\n\n        // If the event spans multiple days include the day and month in the description\n        const spansMultipleDays = false;\n        if (\n            end &&\n            !isRecurring &&\n            (start.getDate() !== end.getDate() ||\n                start.getMonth() !== end.getMonth() ||\n                start.getYear() !== end.getYear())\n        ) {\n            startTime = formatDate(start, {\n                day: 'numeric',\n                month: 'long',\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: false,\n            });\n\n            endTime =\n                end &&\n                formatDate(end, {\n                    day: 'numeric',\n                    month: 'long',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: false,\n                });\n        }\n\n        return (\n            <div\n                role=\"link\"\n                onKeyDown={(e) => this.onScheduleViewContentKeyDown(e, onClick)}\n                tabIndex=\"0\"\n                className=\"calendar-event\"\n            >\n                <div className=\"calendar-event__header\">\n                    {icon && (\n                        <svg className=\"svg-icon svg-icon--expand\">\n                            {iconAlt && <title>{iconAlt}</title>}\n                            <use href={`#${icon}`} />\n                        </svg>\n                    )}\n                    <span className=\"calendar-event__title\">{title}</span>\n                </div>\n                {!allDay && !spansMultipleDays && (\n                    <>\n                        <time\n                            dateTime={startTime}\n                            className=\"calendar-event__time\"\n                        >\n                            {startTime}\n                        </time>\n\n                        {endTime && ` to `}\n                        {endTime && (\n                            <time\n                                dateTime={endTime}\n                                className=\"calendar-event__time\"\n                            >\n                                {endTime}\n                            </time>\n                        )}\n                    </>\n                )}\n            </div>\n        );\n    }\n\n    /**\n     * Get the title to show in the modal popup's H1 tag\n     * @returns {string} title\n     */\n    getModalTitle() {\n        return this.event.title;\n    }\n\n    /**\n     * Get the modal body content for this type of event\n     * @returns {JSX Object} content\n     */\n    getModalContent() {\n        let { start, end } = this.event;\n        const { allDay, type, description, recurrence } = this.event;\n\n        const isRecurring = recurrence && recurrence.length !== 0;\n        if (isRecurring) {\n            ({ start, end } = this.fcEvent); // Just a destruction without a declaration (let/const)\n        }\n\n        // Use FullCalendar utility to format the dates into the structure we need for display\n        const startDate = formatDate(start, {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric',\n        }); // e.g. December 20, 2021\n\n        const startTime = formatDate(start, {\n            hour: 'numeric',\n            minute: '2-digit',\n        }); // e.g. 2:15 PM\n\n        const endDate =\n            end &&\n            formatDate(end, {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            }); // e.g. December 21, 2021\n        const endTime =\n            end &&\n            formatDate(end, {\n                hour: 'numeric',\n                minute: '2-digit',\n            }); // e.g. 12:15 AM\n\n        // Check if the event spans across days (not necessarily lasts for more than 24 hours)\n        let spansMultipleDays = false;\n        if (\n            end &&\n            (start.getDate() !== end.getDate() ||\n                start.getMonth() !== end.getMonth() ||\n                start.getYear() !== end.getYear())\n        ) {\n            spansMultipleDays = true;\n        }\n\n        return (\n            <div\n                className={`calendar-event-details calendar-event-details--${type}`}\n            >\n                <div className=\"calendar-event-details__time\">\n                    {/*\n                        Single day example:     December 21, 2021 from 2:15 PM to 3:15 PM\n                        Multi day span example: August 10, 2022 from 12:00 PM to August 11, 2022 6:00 AM\n                        All day example:        January 1, 2022 All day\n                    */}\n                    <time\n                        dateTime={startDate}\n                        className=\"calendar-event-details__start-date\"\n                    >\n                        {startDate}\n                    </time>\n                    {allDay && (\n                        <span className=\"calendar-event-details__all-day\">\n                            {` All day `}\n                        </span>\n                    )}\n                    {!allDay && (\n                        <>\n                            {` from `}\n                            <time\n                                dateTime={startTime}\n                                className=\"calendar-event-details__start-time\"\n                            >\n                                {startTime}\n                            </time>\n                        </>\n                    )}\n                    {!allDay && endTime && ` to `}\n                    {spansMultipleDays && endDate && (\n                        <time\n                            dateTime={endDate}\n                            className=\"calendar-event-details__end-date\"\n                        >\n                            {` ${endDate} `}\n                        </time>\n                    )}\n                    {!allDay && endTime && (\n                        <time\n                            dateTime={endTime}\n                            className=\"calendar-event-details__end-time\"\n                        >\n                            {endTime}\n                        </time>\n                    )}\n                </div>\n                <div className=\"calendar-event-details__description\">\n                    {description}\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Get the footer controls for this type of event\n     * @returns {array} array of additional footer controls\n     */\n    getModalFooterControls() {\n        return [];\n    }\n}\n","import React from 'react';\nimport DOMPurify from 'dompurify';\nimport { formatDate } from '@fullcalendar/react';\n\nimport BaseCalendarEvent from './BaseCalendarEvent';\n\n/**\n * Assignment type event rendering templates.\n */\nexport default class AssignmentCalendarEvent extends BaseCalendarEvent {\n    /**\n     * Assignments use the courseCode instead of the event title\n     * @returns {string} title to use in FullCalendar event displays\n     */\n    getCalendarItemTitle() {\n        return this.event.courseCode;\n    }\n\n    /**\n     * Get the title to show in the modal popup's H1 tag\n     * @returns {string} title\n     */\n    getModalTitle() {\n        return this.event.courseName;\n    }\n\n    /**\n     * Get the modal body content for this type of event\n     * @returns {JSX Object} content\n     */\n    getModalContent() {\n        let { start } = this.event;\n        const { type, title, description, submissionType, recurrence, url } =\n            this.event;\n\n        const isRecurring = recurrence && recurrence.length !== 0;\n        if (isRecurring) {\n            ({ start } = this.fcEvent); // Just a destruction without a declaration (let/const)\n        }\n\n        // Use FullCalendar utility to format the dates into the structure we need for display\n        const dueDate = formatDate(start, {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n        }); // e.g. December 23, 2021, 2:15 PM\n\n        const cleanDescription = DOMPurify.sanitize(description);\n\n        return (\n            <div\n                className={`calendar-event-details calendar-event-details--${type}`}\n            >\n                <div className=\"calendar-event-details__due\">\n                    <h2 className=\"calendar-event-details__due-title\">\n                        Assignment due\n                    </h2>\n                    {`Due `}\n                    <time\n                        dateTime={dueDate}\n                        className=\"calendar-event-details__due-date\"\n                    >\n                        {dueDate}\n                    </time>\n\n                    <svg aria-hidden className=\"svg-icon\">\n                        <use href=\"#edit\" />\n                    </svg>\n                </div>\n                <h2 className=\"calendar-event-details__sub-title\">{title}</h2>\n                <div\n                    // eslint-disable-next-line react/no-danger -- sanitize using DOMPurify above\n                    dangerouslySetInnerHTML={{ __html: cleanDescription }}\n                    className=\"calendar-event-details__description\"\n                />\n                {submissionType && (\n                    <div className=\"calendar-event-details__submit-method\">\n                        <svg aria-hidden className=\"svg-icon\">\n                            <use href=\"#information\" />\n                        </svg>\n                        {`Submit `}\n                        {submissionType}\n                    </div>\n                )}\n                {url && (\n                    <div className=\"calendar-event-details__submit-note\">\n                        More details available in Canvas\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    /**\n     * Get the footer controls for this type of event\n     * @returns {array} array of additional footer controls\n     */\n    getModalFooterControls() {\n        const additionalControls = [];\n\n        if (this.event.url) {\n            additionalControls.push({\n                url: this.event.url,\n                icon: 'external',\n                label: 'Canvas',\n            });\n        }\n\n        return additionalControls;\n    }\n}\n","/* eslint-disable import/prefer-default-export */\nimport BaseCalendarEvent from './BaseCalendarEvent';\nimport AssignmentCalendarEvent from './AssignmentCalendarEvent';\n\n/**\n * Get the event type customisation object which can be used to get specific rendering HTML/JSX objects based on the event type.\n *\n * @param {Object} event data object containing event information from the apps data source, NOT the fcEvent\n * @returns {Object} customisation object\n */\nexport function getEventTypeCustomisations(event, fcEvent) {\n    if (event.type === 'assignment') {\n        return new AssignmentCalendarEvent(event, fcEvent);\n    }\n    return new BaseCalendarEvent(event, fcEvent);\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, createRef, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport TimeGridPlugin from '@fullcalendar/timegrid';\nimport rrulePlugin from '@fullcalendar/rrule';\n\nimport { EventActions } from './enums';\nimport { getEventTypeCustomisations } from './event-types/EventTypes';\n\nfunction DayView({\n    date,\n    allDaySlot,\n    nowIndicator,\n    events,\n    onEventClick,\n    returnCalendarApi,\n}) {\n    const calendarRef = createRef();\n    const [calendarAPI, setCalendarAPI] = useState();\n\n    // Once the Full Calendar has been created, keep it so its API can be referenced when needed.\n    useEffect(() => {\n        if (calendarRef && calendarRef.current) {\n            setCalendarAPI(calendarRef.current.getApi());\n\n            returnCalendarApi(calendarAPI);\n        }\n    }, [calendarRef]);\n\n    // If the date changes, instruct Full Calendar to change via its API\n    useEffect(() => {\n        if (calendarAPI) {\n            calendarAPI.gotoDate(date);\n        }\n    }, [calendarAPI, date]);\n\n    /*\n        This function is an extension point of Full Calendar to allow custom\n        rendering of the event content within this view type.\n    */\n    const printEventContent = ({ event }) => {\n        const eventCustomisation = getEventTypeCustomisations(\n            event.extendedProps, // Pass the full event data payload not only the fcEvent data\n            event\n        );\n        return eventCustomisation.getDayViewContent();\n    };\n\n    /*\n        Add some extra ARIA bits to the FullCalendar HTML based on how the application is\n        configured.\n    */\n    const adjustDomAfterRender = (arg) => {\n        const interactionType = arg.event.extendedProps._eventInteractionType;\n\n        // Inject a button/link role to override the inherited 'presentation' role so screen readers pick it up easier\n        arg.el.setAttribute(\n            'role',\n            interactionType === EventActions.OpenInModal ? 'button' : 'link'\n        );\n\n        // If new window override link with target=_blank\n        if (interactionType === EventActions.OpenInNewPage) {\n            arg.el.setAttribute('target', '_blank');\n        }\n    };\n\n    return (\n        <div className=\"calendar-day-view\">\n            <FullCalendar\n                height=\"100%\"\n                ref={calendarRef}\n                plugins={[TimeGridPlugin, rrulePlugin]}\n                initialView=\"timeGridDay\"\n                scrollTime=\"08:00:00\" // Default time to scroll the calendar to\n                headerToolbar={false}\n                titleFormat={false}\n                allDaySlot={allDaySlot}\n                nowIndicator={nowIndicator}\n                events={events}\n                eventClick={onEventClick}\n                eventContent={printEventContent}\n                eventDidMount={adjustDomAfterRender}\n                eventMinHeight={48} // SCSS .fc-timegrid-slot needs to be changed to match (minus margins)\n            />\n        </div>\n    );\n}\nexport default React.memo(DayView);\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, createRef, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport DayGridPlugin from '@fullcalendar/daygrid';\nimport rrulePlugin from '@fullcalendar/rrule';\n\nfunction WeekView({ date, events, onEventClick, returnCalendarApi }) {\n    const calendarRef = createRef();\n    const [calendarAPI, setCalendarAPI] = useState();\n\n    // Once the Full Calendar has been created, keep it so its API can be referenced when needed.\n    useEffect(() => {\n        if (calendarRef && calendarRef.current) {\n            setCalendarAPI(calendarRef.current.getApi());\n\n            if (returnCalendarApi) {\n                returnCalendarApi(calendarAPI);\n            }\n        }\n    }, [calendarRef]);\n\n    // If the date changes, instruct Full Calendar to change via its API\n    useEffect(() => {\n        if (calendarAPI) {\n            calendarAPI.gotoDate(date);\n        }\n    }, [calendarAPI, date]);\n\n    return (\n        <div className=\"calendar-week-view\">\n            <FullCalendar\n                height=\"100%\"\n                ref={calendarRef}\n                plugins={[DayGridPlugin, rrulePlugin]}\n                initialView=\"dayGridWeek\"\n                headerToolbar={false}\n                titleFormat={false}\n                events={events}\n                eventClick={onEventClick}\n            />\n        </div>\n    );\n}\nexport default React.memo(WeekView);\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, createRef, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport rrulePlugin from '@fullcalendar/rrule';\nimport DayGridPlugin from '@fullcalendar/daygrid';\n\nfunction MonthView({ date, events, onEventClick, returnCalendarApi }) {\n    const calendarRef = createRef();\n    const [calendarAPI, setCalendarAPI] = useState();\n\n    // Once the Full Calendar has been created, keep it so its API can be referenced when needed.\n    useEffect(() => {\n        if (calendarRef && calendarRef.current) {\n            setCalendarAPI(calendarRef.current.getApi());\n\n            if (returnCalendarApi) {\n                returnCalendarApi(calendarAPI);\n            }\n        }\n    }, [calendarRef]);\n\n    // If the date changes, instruct Full Calendar to change via its API\n    useEffect(() => {\n        if (calendarAPI) {\n            calendarAPI.gotoDate(date);\n        }\n    }, [calendarAPI, date]);\n\n    return (\n        <div className=\"calendar-month-view\">\n            <FullCalendar\n                ref={calendarRef}\n                height=\"100%\"\n                plugins={[DayGridPlugin, rrulePlugin]}\n                initialView=\"dayGridMonth\"\n                headerToolbar={false}\n                titleFormat={false}\n                events={events}\n                eventClick={onEventClick}\n            />\n        </div>\n    );\n}\nexport default React.memo(MonthView);\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\n\nimport FullCalendar from '@fullcalendar/react';\nimport ListPlugin from '@fullcalendar/list';\nimport rrulePlugin from '@fullcalendar/rrule';\n\nimport { getEventTypeCustomisations } from './event-types/EventTypes';\n\nfunction ScheduleView({ events, onEventClick }) {\n    let monthPrimaryLabelCurrent = ''; // Used to determine if a new month section should start\n\n    /* \n        This function is an extension point of Full Calendar to allow custom class names to be applied.\n\n        If the month changes between this event and the last, add a class to this item so\n        a new section can be started by not hiding the 'listDaySideFormat' configured above.\n    */\n    const showMonthLabelWhenMonthChanges = (args) => {\n        if (!monthPrimaryLabelCurrent) {\n            monthPrimaryLabelCurrent = args.sideText;\n        }\n        if (monthPrimaryLabelCurrent !== args.sideText) {\n            monthPrimaryLabelCurrent = args.sideText;\n            return 'calendar-schedule-view-new-month';\n        }\n        return '';\n    };\n\n    /*\n        This function is an extension point of Full Calendar to allow custom\n        rendering of the event content within this view type.\n    */\n    const printEventContent = ({ event }) => {\n        const eventCustomisation = getEventTypeCustomisations(\n            event.extendedProps, // Pass the full event data payload not only the fcEvent data,\n            event\n        );\n        return eventCustomisation.getScheduleViewContent({\n            onClick: onEventClick,\n        });\n    };\n\n    return (\n        <div className=\"calendar-schedule-view\">\n            <FullCalendar\n                height=\"100%\"\n                plugins={[ListPlugin, rrulePlugin]}\n                views={{\n                    // Custom view type based on list so we get a whole 365 days, not just to the end of the current year\n                    oneYear: {\n                        type: 'list',\n                        duration: { days: 365 },\n                        buttonText: 'One Year',\n                    },\n                }}\n                initialView=\"oneYear\" // Set to custom view above\n                headerToolbar={false}\n                titleFormat={false}\n                events={events}\n                eventClick={onEventClick}\n                listDayFormat={{\n                    // e.g. Dec 21\n                    month: 'short',\n                    day: 'numeric',\n                }}\n                listDaySideFormat={{\n                    // listDaySideFormat is used to title the new section when a month change occurs e.g. January 2022\n                    month: 'long',\n                    year: 'numeric',\n                }}\n                dayHeaderClassNames={showMonthLabelWhenMonthChanges}\n                eventContent={printEventContent}\n            />\n        </div>\n    );\n}\nexport default React.memo(ScheduleView);\n","/* eslint-disable react/prefer-stateless-function */\nimport React, {\n    useState,\n    useEffect,\n    useCallback,\n    useContext,\n    useRef,\n} from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport {\n    startOfDay,\n    endOfDay,\n    startOfWeek,\n    endOfWeek,\n    startOfMonth,\n    endOfMonth,\n} from 'date-fns';\n\n// Data layer imports\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport CalendarContext from './data/CalendarContext';\nimport ButtonMenu, { ButtonMenuItem } from '../../button-menu/jsx/button-menu';\nimport Modal from '../../modal/jsx/modal';\n\n// Internal module imports\nimport { CalendarViews, EventActions } from './enums';\nimport DateControlHeader from './dateControlHeader';\nimport DayView from './dayView';\nimport WeekView from './weekView';\nimport MonthView from './monthView';\nimport ScheduleView from './scheduleView';\nimport { getEventTypeCustomisations } from './event-types/EventTypes';\nimport useResizeObserver from './useResizeObserver';\n\nimport '../css/_global.scss'; // Last so our CSS overrides any dependencies above\n\n/**\n * Calendar application\n */\nexport default function Calendar({\n    defaultView,\n    allDaySlot = CalendarViews.Day,\n    nowIndicator,\n    title,\n    bannerEnabled,\n    bannerText,\n    bannerCountType,\n    typeIconMap = {},\n    eventAction = EventActions.OpenInModal,\n}) {\n    const [calendarAPI, setCalendarAPI] = useState();\n    const [viewType, setViewType] = useState(defaultView);\n    const { events, getEvents } = useContext(CalendarContext);\n    const [allDaySlotEnabled, setAllDaySlotEnabled] = useState(allDaySlot);\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [selectedEvent, setSelectedEvent] = useState(undefined);\n\n    const [bannerCount, setBannerCount] = useState(0);\n    const [highlightBanner, setHighlightBanner] = useState(false);\n    const highlightBannerTimer = useRef(null);\n    const highlightBannerLast = useRef(null);\n\n    /*\n        If the size of the calendar changes due to be hidden or made visible by an outside\n        css effect this will detect the change in width and height and cause the DayView / ScheduleView\n        to re-render as Full Calendar needs to have a stable height and width to render correctly.\n    */\n    const [calendarRef, { width, height }] = useResizeObserver();\n\n    // When the 'currentDate' changes update the events in the EventsContext based on the new date.\n    useEffect(() => {\n        // Reset banner details\n        setBannerCount(0);\n        setHighlightBanner(false);\n        highlightBannerLast.current = null;\n        if (highlightBannerTimer.current) {\n            clearTimeout(highlightBannerTimer.current);\n            highlightBannerTimer.current = null;\n        }\n\n        // Fetch the data for the new view\n        if (viewType === CalendarViews.Day) {\n            getEvents({\n                start: startOfDay(currentDate),\n                end: endOfDay(currentDate),\n            });\n        } else if (viewType === CalendarViews.Week) {\n            getEvents({\n                start: startOfWeek(currentDate),\n                end: endOfWeek(currentDate),\n            });\n        } else if (viewType === CalendarViews.Month) {\n            getEvents({\n                start: startOfMonth(currentDate),\n                end: endOfMonth(currentDate),\n            });\n        }\n    }, [currentDate, viewType]);\n\n    // When the view type changes request update the events in the EventsContext based on the required date ranges for the view type\n    useEffect(() => {\n        if (viewType === CalendarViews.Schedule) {\n            // Schedule always show current date to a year in the future\n            const start = new Date(new Date().setHours(0, 0, 0, 0));\n            getEvents({\n                start,\n                end: new Date(\n                    new Date().setFullYear(new Date().getFullYear() + 1)\n                ),\n            });\n        }\n    }, [viewType]);\n\n    // When the events from the EventsContent changes, re-calculate the number to show in the banner\n    useEffect(() => {\n        if (bannerEnabled) {\n            let newCount = 0;\n\n            // Need to check via the page API as only it knows whats being shown on the page after RRULE recurring events has been calculated\n            if (calendarAPI) {\n                newCount = calendarAPI.getEvents().reduce((count, event) => {\n                    if (event.extendedProps.type === bannerCountType) {\n                        return count + 1;\n                    }\n                    return count;\n                }, 0);\n            }\n\n            setBannerCount(newCount);\n        }\n    }, [events, calendarAPI]);\n\n    // When the events from the EventsContent changes, re-calculate all day slot validity\n    useEffect(() => {\n        if (allDaySlot) {\n            if (events.find((event) => event.allDay)) {\n                setAllDaySlotEnabled(true);\n            } else {\n                setAllDaySlotEnabled(false);\n            }\n        }\n    }, [allDaySlot, events]);\n\n    /*\n        Transform from PNP Calendar data format into the FullCalendar format via clone. Also \n        applies any calculated fields which are needed in the event render hook.\n\n        FullCalendar will discard any properties it does not know about so\n        everything is also copied into the extension area 'extendedProps'.\n    */\n    const getFullCalendarEvents = useCallback(\n        (fetchInfo, successCallback) => {\n            const fcEvents = events.map((event, index) => {\n                const fcEvent = {\n                    ...event,\n                    interactive: true,\n                    extendedProps: {\n                        ...event,\n                        _calendarEventIndex: index, // Used to match the fcEvent to the internal state onClick\n                        _eventInteractionType: eventAction, // Used to determine if the tag role should be button or link\n                        duration: Math.floor(\n                            Math.abs(event.end - event.start) / 1000 / 60\n                        ), // Short events (< 30min) dont show the event description on Day view\n                    },\n                };\n\n                // If open in modal is activated delete the URL from the payload as this causes FC to make the event a link on click\n                if (eventAction === EventActions.OpenInModal && event.url) {\n                    fcEvent.extendedProps.url = event.url;\n                    delete fcEvent.url;\n                }\n\n                // If the type matches with a configuration in the icon map add it\n                if (typeIconMap[event.type]) {\n                    fcEvent.extendedProps.icon = typeIconMap[event.type];\n                    fcEvent.extendedProps.iconAlt = event.type;\n                }\n\n                // If banner is enabled tag the event as highlightable via css\n                if (bannerEnabled && event.type === bannerCountType) {\n                    fcEvent.extendedProps.bannerHighlight = true;\n                }\n\n                if (event.recurrence && event.recurrence.length > 0) {\n                    fcEvent.rrule = `${event.recurrence[0]}`;\n                }\n\n                return fcEvent;\n            });\n            successCallback(fcEvents);\n        },\n        [events]\n    );\n\n    // Handler for event being clicked\n    const handleEventClick = useCallback(\n        ({ el, event: fcEvent }) => {\n            // If the eventAction isn't set to modal, try to resolve it first\n            if (eventAction !== EventActions.OpenInModal) {\n                // If there isn't a URL, fall back to the modal\n                if (fcEvent.extendedProps.url) {\n                    return;\n                }\n            }\n\n            /* \n                Either the eventAction is OpenInModal or the event properties didn't contain a URL \n                so set the selected event for the next render to pickup and show a modal.\n            */\n            const calendarEvent =\n                events[fcEvent.extendedProps._calendarEventIndex];\n            setSelectedEvent({ event: calendarEvent, fcEvent, element: el });\n        },\n        [events]\n    );\n\n    const handleEventModalClose = useCallback(() => {\n        /* if (e.type !== 'click') {\n                selectedEvent.element.focus();\n            } */\n        setSelectedEvent(undefined);\n    }, [selectedEvent]);\n\n    const handleCalendarApiSet = useCallback((api) => {\n        setCalendarAPI(api);\n    }, []);\n\n    const handleBannerClick = useCallback(() => {\n        // Highlight the banner types in the calendar for a second\n        setHighlightBanner(true);\n        // Clear any current timeout\n        if (highlightBannerTimer.current) {\n            clearTimeout(highlightBannerTimer.current);\n        }\n        // 'fade out' the banner highlight\n        highlightBannerTimer.current = setTimeout(() => {\n            setHighlightBanner(false);\n            highlightBannerTimer.current = null;\n        }, 1000);\n\n        const todaysEvents = calendarAPI.getEvents();\n        if (todaysEvents.length > 0) {\n            // Cycle though the events that match the banner type on the page\n            let nextItem =\n                highlightBannerLast.current !== null\n                    ? highlightBannerLast.current + 1\n                    : 0;\n            if (nextItem >= todaysEvents.length) {\n                nextItem = 0;\n            }\n            highlightBannerLast.current = nextItem;\n\n            calendarAPI.scrollToTime(\n                todaysEvents[nextItem].start.getHours() * 3600000 +\n                    todaysEvents[nextItem].start.getMinutes() * 60000\n            );\n        }\n    }, [highlightBanner, calendarAPI]);\n\n    let selectedEventCustomisation;\n    if (selectedEvent) {\n        selectedEventCustomisation = getEventTypeCustomisations(\n            selectedEvent.event,\n            selectedEvent.fcEvent\n        );\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <div className=\"calendar-wrapper\">\n            <OverlayProvider className=\"calendar-wrapper__overlay\">\n                <div\n                    ref={calendarRef}\n                    className={`no-wysiwyg calendar ${\n                        viewType !== CalendarViews.Schedule\n                            ? 'calendar--sub-header'\n                            : ''\n                    }`}\n                >\n                    <div className=\"calendar__header\">\n                        <div className=\"calendar__title\">{title}</div>\n                        <ButtonMenu\n                            uniqueId=\"calendar-view-switcher\"\n                            icon=\"overflow-menu\"\n                            iconTitle=\"Toggle view switcher menu\"\n                            className=\"calendar-view-select\"\n                        >\n                            {viewType !== CalendarViews.Schedule && (\n                                <ButtonMenuItem\n                                    label=\"Schedule\"\n                                    onClick={() =>\n                                        setViewType(CalendarViews.Schedule)\n                                    }\n                                />\n                            )}\n                            {viewType !== CalendarViews.Day && (\n                                <ButtonMenuItem\n                                    label=\"Day\"\n                                    onClick={() =>\n                                        setViewType(CalendarViews.Day)\n                                    }\n                                />\n                            )}\n                            {viewType !== CalendarViews.Week && (\n                                <ButtonMenuItem\n                                    label=\"Week\"\n                                    onClick={() =>\n                                        setViewType(CalendarViews.Week)\n                                    }\n                                />\n                            )}\n                            {viewType !== CalendarViews.Month && (\n                                <ButtonMenuItem\n                                    label=\"Month\"\n                                    onClick={() =>\n                                        setViewType(CalendarViews.Month)\n                                    }\n                                />\n                            )}\n                        </ButtonMenu>\n                    </div>\n\n                    {viewType !== CalendarViews.Schedule && (\n                        <DateControlHeader\n                            date={currentDate}\n                            viewType={viewType}\n                            onDateChange={(date) => {\n                                setCurrentDate(date);\n                            }}\n                        />\n                    )}\n\n                    {viewType === CalendarViews.Day &&\n                        bannerEnabled &&\n                        bannerCount > 0 && (\n                            <button\n                                type=\"button\"\n                                aria-label={`Highlight ${bannerText}`}\n                                onClick={() => handleBannerClick()}\n                                className=\"calendar__banner\"\n                            >\n                                {bannerText}\n                                <span className=\"calendar__banner-count\">\n                                    {bannerCount}\n                                </span>\n                            </button>\n                        )}\n\n                    <div\n                        className={`calendar__body ${\n                            highlightBanner\n                                ? 'calendar__body--highlight-types'\n                                : ''\n                        }`}\n                    >\n                        {viewType === CalendarViews.Day && (\n                            <DayView\n                                width={width}\n                                height={height}\n                                date={currentDate}\n                                allDaySlot={allDaySlotEnabled}\n                                nowIndicator={nowIndicator}\n                                events={getFullCalendarEvents}\n                                onEventClick={handleEventClick}\n                                returnCalendarApi={handleCalendarApiSet}\n                            />\n                        )}\n                        {viewType === CalendarViews.Week && (\n                            <WeekView\n                                width={width}\n                                height={height}\n                                date={currentDate}\n                                allDaySlot={allDaySlotEnabled}\n                                nowIndicator={nowIndicator}\n                                events={getFullCalendarEvents}\n                                onEventClick={handleEventClick}\n                            />\n                        )}\n                        {viewType === CalendarViews.Month && (\n                            <MonthView\n                                width={width}\n                                height={height}\n                                date={currentDate}\n                                allDaySlot={allDaySlotEnabled}\n                                nowIndicator={nowIndicator}\n                                events={getFullCalendarEvents}\n                                onEventClick={handleEventClick}\n                            />\n                        )}\n                        {viewType === CalendarViews.Schedule && (\n                            <ScheduleView\n                                width={width}\n                                height={height}\n                                events={getFullCalendarEvents}\n                                onEventClick={handleEventClick}\n                            />\n                        )}\n                    </div>\n                </div>\n                {selectedEvent && (\n                    <Modal\n                        titleId={titleId}\n                        onClose={handleEventModalClose}\n                        className=\"calendar-modal\"\n                    >\n                        <header className=\"calendar-modal__header\">\n                            <h1 id={titleId} className=\"calendar-modal__title\">\n                                {selectedEventCustomisation.getModalTitle()}\n                            </h1>\n                            <button\n                                type=\"button\"\n                                onClick={handleEventModalClose}\n                                className=\"calendar-modal__header-close\"\n                            >\n                                <svg className=\"svg-icon\">\n                                    <title>Close modal</title>\n                                    <use href=\"#close\" />\n                                </svg>\n                            </button>\n                        </header>\n\n                        <div className=\"calendar-modal__body\">\n                            {selectedEventCustomisation.getModalContent()}\n                        </div>\n\n                        <footer className=\"calendar-modal__footer\">\n                            <button\n                                type=\"button\"\n                                onClick={handleEventModalClose}\n                                className=\"calendar-modal__close\"\n                            >\n                                Close\n                            </button>\n                            {selectedEventCustomisation\n                                .getModalFooterControls()\n                                .map((config) => {\n                                    return (\n                                        <a\n                                            key={config.url}\n                                            href={config.url}\n                                            target=\"_blank\"\n                                            className=\"calendar-modal__link\"\n                                            rel=\"noreferrer\"\n                                        >\n                                            {config.icon ? (\n                                                <svg className=\"svg-icon\">\n                                                    <use\n                                                        href={`#${config.icon}`}\n                                                    />\n                                                </svg>\n                                            ) : (\n                                                <></>\n                                            )}\n                                            {config.label}\n                                        </a>\n                                    );\n                                })}\n                        </footer>\n                    </Modal>\n                )}\n            </OverlayProvider>\n        </div>\n    );\n}\n","import { useState, useLayoutEffect } from 'react';\n\n/**\n * Creates a Ref and uses a resize observer to watch the width and height changes\n * that occurr to that ref. Returns changes to the sizes.\n *\n * @returns const [calendarRef, { width, height }] = useResizeObserver();\n */\nexport default function useResizeObserver() {\n    // This creates its own ref, this helps prevent unnessasary re-render spam\n    const [ref, setRef] = useState(null);\n    // Record the width and height of the ref this creates\n    const [size, setSize] = useState({ width: 0, height: 0 });\n\n    function updateSize(entries) {\n        // since we are observing only a single element, so we access the first element in entries array\n        const rect = entries[0].contentRect;\n\n        // current width & height\n        const { width } = rect;\n        const { height } = rect;\n\n        setSize({ width, height });\n    }\n\n    // eslint-disable-next-line consistent-return\n    useLayoutEffect(() => {\n        // Wait until the ref has been set by the createRefCallback\n        if (ref) {\n            const resizeOb = new ResizeObserver(updateSize);\n            resizeOb.observe(ref);\n\n            // Cleanup function to stop observer once dead\n            return () => {\n                resizeOb.unobserve(ref);\n            };\n        }\n    }, [ref]);\n\n    return [setRef, size];\n}\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n"],"names":["ButtonMenu","uniqueId","icon","iconTitle","text","children","className","buttonRef","createRef","isOpen","setIsOpen","useState","focusWithinProps","useFocusWithin","onBlurWithin","keyboardProps","useKeyboard","onKeyDown","e","key","current","focus","modifiedChildren","React","child","onClick","props","ref","type","href","id","ButtonMenuItem","label","DateControlHeader","date","viewType","onDateChange","datePickerButtonRef","isDatePickerOpen","setIsDatePickerOpen","daySkipForward","daySkipBack","CalendarViews","getDaysInMonth","addMonths","addDaysToDate","numberOfDays","newDate","Date","setDate","getDate","toLocaleDateString","undefined","year","month","day","onDayClick","selectedDate","BaseCalendarEvent","constructor","event","fcEvent","this","getCalendarItemTitle","title","getDayViewContent","start","end","allDay","iconAlt","description","duration","bannerHighlight","recurrence","length","startTime","formatDate","hour","minute","hour12","endTime","dateTime","onScheduleViewContentKeyDown","el","getScheduleViewContent","isRecurring","getMonth","getYear","role","tabIndex","getModalTitle","getModalContent","startDate","endDate","spansMultipleDays","getModalFooterControls","AssignmentCalendarEvent","courseCode","courseName","submissionType","url","dueDate","cleanDescription","DOMPurify","dangerouslySetInnerHTML","__html","additionalControls","push","getEventTypeCustomisations","DayView","allDaySlot","nowIndicator","events","onEventClick","returnCalendarApi","calendarRef","calendarAPI","setCalendarAPI","useEffect","getApi","gotoDate","height","plugins","TimeGridPlugin","rrulePlugin","initialView","scrollTime","headerToolbar","titleFormat","eventClick","eventContent","extendedProps","eventDidMount","arg","interactionType","_eventInteractionType","setAttribute","EventActions","eventMinHeight","WeekView","DayGridPlugin","MonthView","ScheduleView","monthPrimaryLabelCurrent","ListPlugin","views","oneYear","days","buttonText","listDayFormat","listDaySideFormat","dayHeaderClassNames","args","sideText","Calendar","defaultView","bannerEnabled","bannerText","bannerCountType","typeIconMap","eventAction","setViewType","getEvents","useContext","CalendarContext","allDaySlotEnabled","setAllDaySlotEnabled","currentDate","setCurrentDate","selectedEvent","setSelectedEvent","bannerCount","setBannerCount","highlightBanner","setHighlightBanner","highlightBannerTimer","useRef","highlightBannerLast","width","setRef","size","setSize","updateSize","entries","rect","contentRect","useLayoutEffect","resizeOb","ResizeObserver","observe","unobserve","useResizeObserver","clearTimeout","startOfDay","endOfDay","startOfWeek","endOfWeek","startOfMonth","endOfMonth","setHours","setFullYear","getFullYear","newCount","reduce","count","find","getFullCalendarEvents","useCallback","fetchInfo","successCallback","map","index","interactive","_calendarEventIndex","Math","floor","abs","rrule","handleEventClick","calendarEvent","element","handleEventModalClose","handleCalendarApiSet","api","handleBannerClick","setTimeout","todaysEvents","nextItem","scrollToTime","getHours","getMinutes","selectedEventCustomisation","titleId","uuidv4","onClose","config","target","rel","Modal","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","modalRef","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","removeAttribute","focusFirst","hidden"],"sourceRoot":""}