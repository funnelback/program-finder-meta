{"version":3,"file":"js/SearchHistory-d88f61fdb31b6fdf41c6.js","mappings":";iOASO,MAAMA,EACTC,YAAYC,GACR,IAAKA,EACD,MAAM,IAAIC,MAAJ,kEAKV,CAAC,kBAAkBC,SAASC,IACxB,IAAKH,EAAIG,GACL,MAAM,IAAIF,MAAJ,UACCE,EADD,4EAMdC,KAAKC,eAAiBL,EAAIK,eAQ9BC,OAAOC,GACH,OAAOH,KAAKC,eAAeC,OAAOC,GAOtCC,YACI,OAAOJ,KAAKC,eAAeG,YAQ/BC,IAAIF,GACA,OAAOH,KAAKC,eAAeI,IAAIF,GAOnCG,SACI,OAAON,KAAKC,eAAeK,SAQ/BC,IAAIJ,EAAKK,GACL,OAAOR,KAAKC,eAAeM,IAAIJ,EAAKK,GAOxCC,OAAOC,GACH,OAAOV,KAAKC,eAAeQ,OAAOC,aClE1C,OARuBC,EAAAA,EAAAA,eAAc,CACjCC,SAAS,EACTC,aAAc,GACdC,cAAe,GACfC,aAAc,OACdC,cAAe,SC+CnB,MAnDwB,IAAkC,IAAjC,SAAEC,EAAF,eAAYC,GAAqB,EACtD,MAAON,EAASO,IAAcC,EAAAA,EAAAA,WAAS,IAChCP,EAAcQ,IAAmBD,EAAAA,EAAAA,UAAS,KAC1CN,EAAeQ,IAAoBF,EAAAA,EAAAA,UAAS,KAGnDG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAASN,EAAeZ,SAExBmB,EAAgBD,EAAOX,cAAgB,GACvCa,EAAiBF,EAAOV,eAAiB,GAE/CO,EAAgBI,GAChBH,EAAiBI,GAEjBP,GAAW,KACZ,IAGH,MAAMJ,GAAeY,EAAAA,EAAAA,cAAaC,IAC9B,MAAMJ,EAASN,EAAeZ,SAExBmB,EAAyB,UAATG,EAAmB,GAAKJ,EAAOX,aAC/Ca,EAA0B,WAATE,EAAoB,GAAKJ,EAAOV,cAGvDI,EAAeT,OAAO,CAClBI,aAAcY,EACdX,cAAeY,IAInBL,EAAgBI,GAChBH,EAAiBI,GACjBP,GAAW,KACZ,IAEH,OACI,gBAAC,WAAD,CACIX,MAAO,CACHK,eACAE,eACAD,gBACAF,YAGHK,wOCxCb,SAASY,EAAT,GAA+D,IAAvC,QAAEjB,EAAF,KAAWkB,EAAX,KAAiBF,EAAjB,aAAuBb,GAAgB,EAC3D,OAAKe,GAAwB,IAAhBA,EAAKC,OAQd,gCACI,sBAAIC,UAAU,wBACTpB,GACGkB,EAAKG,KAAI,CAACC,EAAgBC,KACtB,MAAM,MAAEC,EAAF,IAASC,EAAT,KAAcC,EAAd,MAAoBC,EAApB,MAA2BC,GAC7BN,EAEEO,GAAeC,EAAAA,EAAAA,GACjB,IAAIC,KACJ,IAAIA,KAAKL,IAEPM,EACO,UAAThB,EAAmBQ,EAAnB,UAA8BA,EAA9B,aAAwCI,EAAxC,KAEJ,OAEI,sBAAIR,UAAU,4BAA4B7B,IAAKgC,GAC3C,qBAAGU,KAAMR,GAAMO,GADnB,IACsCH,EACjCF,GACG,qCAAkBA,EAAlB,WAMxB,0BACIX,KAAK,SACLI,UAAU,+BACVI,MAAM,gBACNU,QAAS,KAEDC,QAAQ,wCACRhC,EAAaa,KAPzB,UA/BA,qBAAGI,UAAU,8BAAb,QACUJ,EADV,sBAgDZ,SAASoB,EAAQC,GACb,MAAM,kBACFC,EADE,mBAEFC,EAFE,iBAGFC,EAHE,kBAIFC,GACAJ,GACE,QAAErC,EAAF,cAAWE,EAAX,aAA0BD,EAA1B,aAAwCE,IAC1CuC,EAAAA,EAAAA,YAAWC,GAEf,OACI,uBAAKvB,UAAU,6BACVoB,GACG,2BAASpB,UAAU,6BACf,sBAAIA,UAAU,2BACV,uBAAKA,UAAU,YACX,6BAAQkB,GACR,uBAAKL,KAAK,eAEbK,GAEL,gBAACrB,EAAD,GACID,KAAK,QACLhB,QAASA,EACTkB,KAAMjB,EACNE,aAAcA,GACVkC,KAKfI,GACG,2BAASrB,UAAU,6BACf,sBAAIA,UAAU,2BACV,uBAAKA,UAAU,YACX,6BAAQmB,GACR,uBAAKN,KAAK,aAEbM,GAEL,gBAACtB,EAAD,GACID,KAAK,SACLhB,QAASA,EACTkB,KAAMhB,EACNC,aAAcA,GACVkC,MAQ5B,MAAM,OAAEO,EAAF,KAAUC,GAASC,IAgBV,SAASC,EAAcV,GAClC,MAAM,eAAEhD,GAAmBgD,EAErB/B,EAAiB,IAAIxB,EAAe,CAAEO,mBAE5C,OACI,gBAAC,EAAD,CAAiBiB,eAAgBA,GAC7B,gBAAC8B,EAAYC,IArBzBD,EAAQY,UAAY,CAChBV,kBAAmBM,EACnBL,mBAAoBK,EACpBJ,iBAAkBK,EAClBJ,kBAAmBI,GAGvBT,EAAQa,aAAe,CACnBX,kBAAmB,2BACnBC,mBAAoB,4BACpBC,kBAAkB,EAClBC,mBAAmB","sources":["webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/StorageService/StorageService.js","webpack://Plug-and-Play-Template/./src/modules/search-history/jsx/data/HistoryContext.jsx","webpack://Plug-and-Play-Template/./src/modules/search-history/jsx/data/HistoryProvider.jsx","webpack://Plug-and-Play-Template/./src/modules/search-history/jsx/search-history.jsx"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n/* eslint-disable import/prefer-default-export */\n\n/**\n * An storage service that provides methods to store and retrieve key/value data.\n */\nexport class StorageService {\n    constructor(dto) {\n        if (!dto) {\n            throw new Error(\n                `dto is required when instantiating a new StorageService object`\n            );\n        }\n\n        [`storageAdapter`].forEach((name) => {\n            if (!dto[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new StorageService object`\n                );\n            }\n        });\n\n        this.storageAdapter = dto.storageAdapter;\n    }\n\n    /**\n     * Delete a specific key.\n     * @param {string} key The key.\n     * @returns {void}\n     */\n    delete(key) {\n        return this.storageAdapter.delete(key);\n    }\n\n    /**\n     * Delete all values.\n     * @returns {void}\n     */\n    deleteAll() {\n        return this.storageAdapter.deleteAll();\n    }\n\n    /**\n     * Get a specific value.\n     * @param {string} key The key.\n     * @returns {any}\n     */\n    get(key) {\n        return this.storageAdapter.get(key);\n    }\n\n    /**\n     * Get all values.\n     * @returns {object}\n     */\n    getAll() {\n        return this.storageAdapter.getAll();\n    }\n\n    /**\n     * Set a specific value.\n     * @param {string} key The key.\n     * @returns {any}\n     */\n    set(key, value) {\n        return this.storageAdapter.set(key, value);\n    }\n\n    /**\n     * Set all values.\n     * @returns {object}\n     */\n    setAll(values) {\n        return this.storageAdapter.setAll(values);\n    }\n}\n","import { createContext } from 'react';\n\nconst HistoryContext = createContext({\n    isReady: false,\n    clickHistory: [],\n    searchHistory: [],\n    clearHistory: () => {},\n    reloadHistory: () => {},\n});\n\nexport default HistoryContext;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport HistoryContext from './HistoryContext';\n\nconst HistoryProvider = ({ children, storageService }) => {\n    const [isReady, setIsReady] = useState(false);\n    const [clickHistory, setClickHistory] = useState([]);\n    const [searchHistory, setSearchHistory] = useState([]);\n\n    // When mounted fetch data from local storage\n    useEffect(() => {\n        const result = storageService.getAll();\n\n        const _clickHistory = result.clickHistory || [];\n        const _searchHistory = result.searchHistory || [];\n\n        setClickHistory(_clickHistory);\n        setSearchHistory(_searchHistory);\n\n        setIsReady(true);\n    }, []);\n\n    // Clearing local storage.\n    const clearHistory = useCallback((type) => {\n        const result = storageService.getAll();\n\n        const _clickHistory = type === 'click' ? [] : result.clickHistory;\n        const _searchHistory = type === 'search' ? [] : result.searchHistory;\n\n        // Call service to update storage.\n        storageService.setAll({\n            clickHistory: _clickHistory,\n            searchHistory: _searchHistory,\n        });\n\n        // Update state with fresh data.\n        setClickHistory(_clickHistory);\n        setSearchHistory(_searchHistory);\n        setIsReady(true);\n    }, []);\n\n    return (\n        <HistoryContext.Provider\n            value={{\n                clickHistory,\n                clearHistory,\n                searchHistory,\n                isReady,\n            }}\n        >\n            {children}\n        </HistoryContext.Provider>\n    );\n};\n\nexport default HistoryProvider;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-alert */\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistance } from 'date-fns';\nimport { StorageService } from '../../_data-layer/js/Services/StorageService/StorageService';\nimport HistoryProvider from './data/HistoryProvider';\nimport HistoryContext from './data/HistoryContext';\n\nfunction HistorySection({ isReady, data, type, clearHistory }) {\n    if (!data || data.length === 0) {\n        return (\n            <p className=\"search-history__list-empty\">\n                Your {type} history is empty.\n            </p>\n        );\n    }\n    return (\n        <>\n            <ul className=\"search-history__list\">\n                {isReady &&\n                    data.map((historyElement, id) => {\n                        const { title, url, time, query, count } =\n                            historyElement;\n\n                        const friendlyDate = formatDistance(\n                            new Date(),\n                            new Date(time)\n                        );\n                        const friendlyName =\n                            type === 'click' ? title : `${title} (${count})`;\n\n                        return (\n                            // eslint-disable-next-line react/no-array-index-key\n                            <li className=\"search-history__list-item\" key={id}>\n                                <a href={url}>{friendlyName}</a> {friendlyDate}\n                                {query && (\n                                    <span> for &quot;{query}&quot; </span>\n                                )}\n                            </li>\n                        );\n                    })}\n            </ul>\n            <button\n                type=\"button\"\n                className=\"search-history__button-clear\"\n                title=\"Clear history\"\n                onClick={() => {\n                    // eslint-disable-next-line no-restricted-globals\n                    if (confirm('Your search history will be cleared')) {\n                        clearHistory(type);\n                    }\n                }}\n            >\n                Clear\n            </button>\n        </>\n    );\n}\n\nfunction History(props) {\n    const {\n        clickHistoryLabel,\n        searchHistoryLabel,\n        showClickHistory,\n        showSearchHistory,\n    } = props;\n    const { isReady, searchHistory, clickHistory, clearHistory } =\n        useContext(HistoryContext);\n\n    return (\n        <div className=\"search-history no-wysiwyg\">\n            {showClickHistory && (\n                <section className=\"search-history__container\">\n                    <h2 className=\"search-history__heading\">\n                        <svg className=\"svg-icon\">\n                            <title>{clickHistoryLabel}</title>\n                            <use href=\"#favorite\" />\n                        </svg>\n                        {clickHistoryLabel}\n                    </h2>\n                    <HistorySection\n                        type=\"click\"\n                        isReady={isReady}\n                        data={clickHistory}\n                        clearHistory={clearHistory}\n                        {...props}\n                    />\n                </section>\n            )}\n\n            {showSearchHistory && (\n                <section className=\"search-history__container\">\n                    <h2 className=\"search-history__heading\">\n                        <svg className=\"svg-icon\">\n                            <title>{searchHistoryLabel}</title>\n                            <use href=\"#search\" />\n                        </svg>\n                        {searchHistoryLabel}\n                    </h2>\n                    <HistorySection\n                        type=\"search\"\n                        isReady={isReady}\n                        data={searchHistory}\n                        clearHistory={clearHistory}\n                        {...props}\n                    />\n                </section>\n            )}\n        </div>\n    );\n}\n\nconst { string, bool } = PropTypes;\n\nHistory.propTypes = {\n    clickHistoryLabel: string,\n    searchHistoryLabel: string,\n    showClickHistory: bool,\n    showSearchHistory: bool,\n};\n\nHistory.defaultProps = {\n    clickHistoryLabel: 'Recently clicked results',\n    searchHistoryLabel: 'Recently searched results',\n    showClickHistory: true,\n    showSearchHistory: true,\n};\n\nexport default function SearchHistory(props) {\n    const { storageAdapter } = props;\n\n    const storageService = new StorageService({ storageAdapter });\n\n    return (\n        <HistoryProvider storageService={storageService}>\n            <History {...props} />\n        </HistoryProvider>\n    );\n}\n"],"names":["StorageService","constructor","dto","Error","forEach","name","this","storageAdapter","delete","key","deleteAll","get","getAll","set","value","setAll","values","createContext","isReady","clickHistory","searchHistory","clearHistory","reloadHistory","children","storageService","setIsReady","useState","setClickHistory","setSearchHistory","useEffect","result","_clickHistory","_searchHistory","useCallback","type","HistorySection","data","length","className","map","historyElement","id","title","url","time","query","count","friendlyDate","formatDistance","Date","friendlyName","href","onClick","confirm","History","props","clickHistoryLabel","searchHistoryLabel","showClickHistory","showSearchHistory","useContext","HistoryContext","string","bool","PropTypes","SearchHistory","propTypes","defaultProps"],"sourceRoot":""}