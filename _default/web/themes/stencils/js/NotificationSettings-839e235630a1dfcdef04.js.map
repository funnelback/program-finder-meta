{"version":3,"file":"js/NotificationSettings-839e235630a1dfcdef04.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/libs/PromiseDebouncer.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/UserService/UserService.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Contexts/UserContext/UserContext.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications-settings/jsx/notification-settings.jsx"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport class PromiseDebouncer {\n    constructor() {\n        this.requests = new Map();\n    }\n\n    debounce(key, promiseFactory) {\n        const keyForComparison = JSON.stringify(key);\n        if (!this.requests.has(keyForComparison)) {\n            const promise = promiseFactory();\n            // Clean up after the promise.\n            promise.finally(() => {\n                this.requests.delete(keyForComparison);\n            });\n            this.requests.set(keyForComparison, promise);\n        }\n        return this.requests.get(keyForComparison);\n    }\n\n    get(key) {\n        return this.requests.get(JSON.stringify(key));\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport { PromiseDebouncer } from '../../libs/PromiseDebouncer';\n\n/* eslint-disable import/prefer-default-export */\n\nexport class UserService {\n    constructor(dto) {\n        if (!dto) {\n            throw new Error(\n                `dto is required when instantiating a new UserService`\n            );\n        }\n\n        [`userAdapter`].forEach((name) => {\n            if (!dto[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new UserService`\n                );\n            }\n        });\n\n        this.promiseDebouncer = new PromiseDebouncer();\n        this.userAdapter = dto.userAdapter;\n    }\n\n    /**\n     * Get user.\n     * @param {string} userId The user id.\n     *\n     * @returns {Promise<object>} A promised user.\n     */\n    get(userId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                userId,\n            },\n            () => this.userAdapter.get(userId)\n        );\n    }\n\n    /**\n     * Update an user with new values.\n     *\n     * @param {string} documentId The user id.\n     * @param {object} user The user data to replace.\n     *\n     * @returns {Promise<object>} The result of the update.\n     */\n    setAll(user, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.setAll(user, documentId)\n        );\n    }\n\n    /**\n     * Method will toggle given key in array.\n     *\n     * @param {string} notificationKey Notification key we need to toggle.\n     * @param {object} user User object.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    updateNotifications(notificationKey, user) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                notificationKey,\n            },\n            () => this.userAdapter.updateNotifications(notificationKey, user)\n        );\n    }\n\n    /**\n     * Method will toggle push notifications on/off.\n     *\n     * @param {bool} toggle Flag determining if notifications should be on or off.\n     * @param {string} documentId For multiple promises only.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    toggleNotifications(toggle, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.toggleNotifications(toggle)\n        );\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\n\n/**\n * The user context provider.\n * @param {object} props The events provider props.\n * @returns {JSX.Element} Event context provider component.\n */\nexport const UserProvider = ({ children, userService, userId }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n    const [user, setUser] = useState([]);\n\n    // Load user object from adapter and update internal state with fetched object.\n    useEffect(() => {\n        setIsLoading(true);\n\n        userService.get(userId).then((response) => {\n            setUser(response);\n            setIsLoading(false);\n            setIsReady(true);\n        });\n    }, [user]);\n\n    // Calls adapter method in order to update user with updated values.\n    const updateUser = useCallback(\n        (id, newUser) => {\n            setIsLoading(true);\n\n            return userService.setAll(newUser, id).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user push notifications preferences.\n    const toggleNotifications = useCallback(\n        (toggle) => {\n            setIsLoading(true);\n\n            return userService.toggleNotifications(toggle).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user notifications preferences.\n    const updateNotifications = useCallback(\n        (notifications) => {\n            setIsLoading(true);\n\n            return userService\n                .updateNotifications(notifications, user)\n                .then((result) => {\n                    setUser(result);\n                    setIsLoading(false);\n                    setIsReady(true);\n                });\n        },\n        [user]\n    );\n\n    return (\n        <UserContext.Provider\n            value={{\n                user,\n                userService,\n                isLoading,\n                isReady,\n                updateUser,\n                updateNotifications,\n                toggleNotifications,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n\n/**\n * The context for user.\n * @export\n */\nexport const UserContext = createContext({\n    user: {},\n    userId: null,\n    userService: null,\n    isLoading: false,\n    isReady: false,\n    updateUser: () => {},\n    updateNotifications: () => {},\n    toggleNotifications: () => {},\n});\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState, useCallback, useContext } from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport PropTypes from 'prop-types';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport { UserService } from 'PlugAndPlay/_data-layer/js/global';\nimport { UserProvider, UserContext } from 'PlugAndPlay/_data-layer/jsx/global';\n\nimport Modal from '../../modal/jsx/modal';\n\nfunction NotificationsSettingsModal(props) {\n    const { title, pushNotificationsLabel, fieldsSpec } = props;\n\n    const {\n        user,\n        isReady,\n        isLoading,\n        updateUser,\n        updateNotifications,\n        toggleNotifications,\n    } = useContext(UserContext);\n\n    const [supportNotifications, setSupportNotification] = useState(false);\n    const [student, setStudent] = useState(null);\n    const [pushStatus, setPushStatus] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const toggleModal = useCallback(() => {\n        setShowModal(!showModal);\n    }, [showModal]);\n\n    // This is to make sure our input fields have unique ids.\n    const fieldId = uuidv4();\n\n    // After fetching user object we are setting him in local state.\n    useEffect(() => {\n        setStudent(user);\n    }, [isReady]);\n\n    // Safari and iOS does not support notifications, we wont show panel.\n    useEffect(() => {\n        const agent = window.navigator.userAgent;\n        const iOS = !!agent.match(/iphone/i);\n        const safari = !!agent.match(/crios/i);\n        const supported = !(iOS || safari);\n\n        setSupportNotification(supported);\n    }, [isReady]);\n\n    // Call context and update user notification type preferences.\n    const toggleExcludedField = useCallback(\n        async (key) => {\n            await updateNotifications(key);\n            setStudent(user);\n        },\n        [user]\n    );\n\n    // Call context and update user push notifications preferences.\n    const togglePushNotifications = useCallback(\n        async (key) => {\n            setPushStatus(await toggleNotifications(key));\n        },\n        [user]\n    );\n\n    // Update user with new notification preferences.\n    const updateNotificationSettings = useCallback(async () => {\n        await updateUser(student);\n        setShowModal(false);\n    }, [student, pushStatus, supportNotifications]);\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                className=\"notifications-settings__action\"\n                onClick={toggleModal}\n            >\n                Notification settings\n            </button>\n\n            {showModal && (\n                <Modal\n                    onClose={toggleModal}\n                    titleId={titleId}\n                    className=\"notifications-settings-modal\"\n                >\n                    <header className=\"notifications-settings-modal__header\">\n                        <h1\n                            id={titleId}\n                            className=\"notifications-settings-modal__title\"\n                        >\n                            {title}\n                        </h1>\n                        <button\n                            type=\"button\"\n                            onClick={toggleModal}\n                            className=\"notifications-settings-modal__header-close\"\n                        >\n                            <svg className=\"svg-icon\">\n                                <title>Close modal</title>\n                                <use href=\"#close\" />\n                            </svg>\n                        </button>\n                    </header>\n                    <div className=\"custom-form notifications-settings notifications-settings__container\">\n                        <div className=\"sq-form-question-answer\">\n                            <ul>\n                                {supportNotifications && (\n                                    <li className=\"notifications-settings__switch-item\">\n                                        <div className=\"notifications-settings__notifications-switch\">\n                                            <svg className=\"svg-icon notifications-settings__notifications-icon\">\n                                                <use href=\"#edify-notification\" />\n                                            </svg>\n                                            <h2 className=\"notifications-settings__label\">\n                                                Push notifications\n                                            </h2>\n                                            <div className=\"switch\">\n                                                <input\n                                                    className=\"switch__input\"\n                                                    type=\"checkbox\"\n                                                    id={`switch-input-${fieldId}`}\n                                                    onChange={\n                                                        togglePushNotifications\n                                                    }\n                                                    value={pushStatus}\n                                                    disabled={!isReady}\n                                                    aria-describedby={`switch-status-${fieldId}`}\n                                                    aria-labelledby={`switch-description-${fieldId}`}\n                                                />\n                                                <label\n                                                    id={`switch-description-${fieldId}`}\n                                                    className=\"switch__label\"\n                                                    htmlFor={`switch-input-${fieldId}`}\n                                                >\n                                                    Toggle push notifications\n                                                </label>\n                                                <div\n                                                    className=\"switch__marker\"\n                                                    aria-hidden=\"true\"\n                                                />\n                                            </div>\n                                        </div>\n                                        <small\n                                            id={`switch-status-${fieldId}`}\n                                            className=\"notifications-settings__description\"\n                                        >\n                                            {' '}\n                                            {pushNotificationsLabel}\n                                        </small>\n                                    </li>\n                                )}\n                                {isReady &&\n                                    fieldsSpec.map(\n                                        ({ id, label, description, key }) => {\n                                            const labelId = uuidv4();\n                                            return (\n                                                <li\n                                                    key={id}\n                                                    className=\"notifications-settings__switch-item\"\n                                                >\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        name={id}\n                                                        id={`${id}-${labelId}`}\n                                                        value={\n                                                            student.excludeNotificationTypes &&\n                                                            student.excludeNotificationTypes.includes(\n                                                                key\n                                                            )\n                                                        }\n                                                        disabled={!isReady}\n                                                        onChange={() =>\n                                                            toggleExcludedField(\n                                                                key\n                                                            )\n                                                        }\n                                                        className=\"sq-form-field\"\n                                                        aria-describedby={`${id}-${labelId}-description`}\n                                                        aria-labelledby={`${id}-${labelId}-label`}\n                                                    />\n                                                    <label\n                                                        id={`${id}-${labelId}-label`}\n                                                        htmlFor={`${id}-${labelId}`}\n                                                        className=\"notifications-settings__label\"\n                                                    >\n                                                        {label}\n                                                    </label>\n                                                    <small\n                                                        id={`${id}-${labelId}-description`}\n                                                        className=\"notifications-settings__description\"\n                                                    >\n                                                        {description}\n                                                    </small>\n                                                </li>\n                                            );\n                                        }\n                                    )}\n                            </ul>\n                        </div>\n                        <footer className=\"notifications-settings-modal__footer\">\n                            <button\n                                className=\"notifications-settings-modal__footer-button\"\n                                type=\"button\"\n                                onClick={updateNotificationSettings}\n                                disabled={isLoading}\n                            >\n                                Update notifications\n                                <span className=\"sr-only\">\n                                    {` `} Modal will be closed after pressing\n                                    update{' '}\n                                </span>\n                            </button>\n                        </footer>\n                    </div>\n                </Modal>\n            )}\n        </>\n    );\n}\n\nexport default function NotificationSettings(props) {\n    const { userAdapter, documentId } = props;\n\n    const userService = new UserService({ userAdapter });\n\n    return (\n        <OverlayProvider>\n            <UserProvider\n                userService={userService}\n                userId={documentId}\n                key={documentId}\n            >\n                <NotificationsSettingsModal {...props} />\n            </UserProvider>\n        </OverlayProvider>\n    );\n}\n\nconst { string, number, func, oneOfType, arrayOf, shape } = PropTypes;\n\nNotificationSettings.propTypes = {\n    title: string,\n    documentId: oneOfType([string, number]),\n    onDialogClose: func,\n    pushNotificationsLabel: string,\n    fieldsSpec: arrayOf(\n        shape({\n            id: string,\n            label: string,\n            description: string,\n            key: string,\n        })\n    ),\n};\n\nNotificationSettings.defaultProps = {\n    title: `Notifications settings`,\n    documentId: `666`,\n    onDialogClose: () => {},\n    pushNotificationsLabel: `Most students enable push notifications to stay on top of their studies. This will allow\n    you to receive notifications directly to this device.`,\n    fieldsSpec: [\n        {\n            id: `assignment_reminder`,\n            label: `Assignment reminder`,\n            description: `Remind me about assignments 1 day before their due date.`,\n            key: `assignment_reminder`,\n        },\n        {\n            id: `canvas_announcement`,\n            label: `Course announcements`,\n            description: `Announcements related to one of my courses.`,\n            key: `canvas_announcement`,\n        },\n    ],\n};\n"],"names":["PromiseDebouncer","constructor","this","requests","Map","debounce","key","promiseFactory","keyForComparison","JSON","stringify","has","promise","finally","delete","set","get","UserService","dto","Error","forEach","name","promiseDebouncer","userAdapter","userId","method","setAll","user","documentId","updateNotifications","notificationKey","toggleNotifications","toggle","UserProvider","children","userService","isLoading","setIsLoading","useState","isReady","setIsReady","setUser","useEffect","then","response","updateUser","useCallback","id","newUser","result","notifications","UserContext","Provider","value","createContext","NotificationsSettingsModal","props","title","pushNotificationsLabel","fieldsSpec","useContext","supportNotifications","setSupportNotification","student","setStudent","pushStatus","setPushStatus","showModal","setShowModal","toggleModal","fieldId","uuidv4","agent","window","navigator","userAgent","iOS","match","safari","toggleExcludedField","async","togglePushNotifications","updateNotificationSettings","titleId","type","className","onClick","onClose","href","onChange","disabled","htmlFor","map","label","description","labelId","excludeNotificationTypes","includes","NotificationSettings","string","number","func","oneOfType","arrayOf","shape","PropTypes","propTypes","onDialogClose","defaultProps"],"sourceRoot":""}