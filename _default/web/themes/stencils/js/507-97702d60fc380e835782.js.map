{"version":3,"file":"js/507-97702d60fc380e835782.js","mappings":"uNA+De,SAASA,EAAOC,GAC3B,MAAM,GAAEC,EAAE,MAAEC,EAAK,UAAEC,EAAS,WAAEC,EAAU,UAAEC,EAAS,YAAEC,GAAgBN,GAC/D,QAAEO,EAAO,cAAEC,IAAkBC,EAAAA,EAAAA,KAEnC,OAAKF,EAAQH,IAA8C,IAA/BG,EAAQH,GAAYM,OAK5C,uBAAKT,GAAK,cAAaA,IAAME,UAAW,CAAE,kCAAkCA,GAAWQ,KAAK,KAAMC,KAAK,YACnG,sBAAIT,UAAU,yCAAyCD,GACtDK,EAAQH,IACLG,EAAQH,GAAYS,KAAI,CAACC,EAAMC,IAvE/C,SAAiBf,GACb,MAAM,KAAEc,EAAI,MAAEC,EAAK,YAAET,EAAW,cAAEE,EAAa,UAAEH,GAAcL,GACzD,OACFgB,EACAC,MAAM,aAAEC,IACRJ,EAEEK,EAAS,GAAED,EAAaE,mBAAmBF,EAAaG,iBAC9D,OACI,uBACIC,IAAKjB,EACLO,KAAK,MACLX,GAAK,GAAEc,IACPQ,IAAM,iBAAgBR,IACtB,gBAAeP,IAAkBO,EACjCZ,UAAU,6CACVqB,QAAUC,GAAMnB,EAAYmB,EAAG,IAAKX,EAAMK,UAC1CO,UAAYD,GAAMnB,EAAYmB,EAAG,IAAKX,EAAMK,UAC5CQ,UAAW,GAEX,uBAAKxB,UAAU,gCAAgCS,KAAK,YAChD,qBAAGO,MAAOA,EAAOhB,UAAU,8BAA8ByB,KAAMZ,EAAQW,UAAW,GAC7ER,EACAD,EAAaW,kBACV,uBAAK1B,UAAU,kCACX,uBAAKA,UAAU,sCAAsC,cAAY,QAC7D,2CACA,uBAAKyB,KAAK,eAEbV,EAAaW,iBAAiBlB,KAAK,KAAKmB,QAAQ,IAAK,OAI7DZ,EAAaa,aACV,uBAAK5B,UAAU,kCACX,uBAAKA,UAAU,sCAAsC,cAAY,QAC7D,6CACA,uBAAKyB,KAAK,YAEd,wBAAMzB,UAAU,WAAS,iBACxBe,EAAaa,YAAYpB,KAAK,OAItCO,EAAac,aACV,wBAAM7B,UAAU,iCAAiCwB,UAAW,GACxD,uBAAKxB,UAAU,sCAAsC,cAAY,QAC7D,sCACA,uBAAKyB,KAAK,YAEbV,EAAac,eAO1C,CAeoBC,CAAQ,CACJnB,OACAC,QACAT,cACAE,gBACAH,iBAbT,IAkBf,CAEA,MAAM,OAAE6B,EAAM,OAAEC,EAAM,KAAEC,GAASC,IAEjCtC,EAAOuC,UAAY,CACfrC,GAAIiC,EAAOK,WACXrC,MAAOgC,EACP/B,UAAW+B,EACX9B,WAAY+B,EAAOI,WACnBlC,UAAW+B,EAAKG,YAGpBxC,EAAOyC,aAAe,CAClBtC,MAAQ,GACRC,UAAY,G","sources":["webpack://template-stencils/./src/modules/autocomplete-concierge/jsx/templates/people--v16.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../StoreProvider';\n\nfunction partial(props) {\n    const { data, index, handleClick, selectedIndex, childRefs } = props;\n    const {\n        action,\n        disp: { listMetadata },\n    } = data;\n\n    const title = `${listMetadata.peopleFirstName} ${listMetadata.peopleLastName}`;\n    return (\n        <div\n            ref={childRefs}\n            role=\"row\"\n            id={`${index}`}\n            key={`result-people-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item\"\n            onClick={(e) => handleClick(e, { ...data, title })}\n            onKeyDown={(e) => handleClick(e, { ...data, title })}\n            tabIndex={-1}\n        >\n            <div className=\"autocomplete-results__details\" role=\"gridcell\">\n                <a title={title} className=\"autocomplete-results__title\" href={action} tabIndex={-1}>\n                    {title}\n                    {listMetadata.peopleDepartment && (\n                        <div className=\"autocomplete-results__metadata\">\n                            <svg className=\"svg-icon autocomplete-results__icon\" aria-hidden=\"true\">\n                                <title>Department</title>\n                                <use href=\"#building\" />\n                            </svg>\n                            {listMetadata.peopleDepartment.join(',').replace(',', ', ')}\n                        </div>\n                    )}\n\n                    {listMetadata.peoplePhone && (\n                        <div className=\"autocomplete-results__metadata\">\n                            <svg className=\"svg-icon autocomplete-results__icon\" aria-hidden=\"true\">\n                                <title>Phone number</title>\n                                <use href=\"#phone\" />\n                            </svg>\n                            <span className=\"sr-only\">Phone number </span>\n                            {listMetadata.peoplePhone.join(', ')}\n                        </div>\n                    )}\n\n                    {listMetadata.peopleEmail && (\n                        <span className=\"autocomplete-results__metadata\" tabIndex={-1}>\n                            <svg className=\"svg-icon autocomplete-results__icon\" aria-hidden=\"true\">\n                                <title>Email</title>\n                                <use href=\"#email\" />\n                            </svg>\n                            {listMetadata.peopleEmail}\n                        </span>\n                    )}\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default function People(props) {\n    const { id, label, className, templateId, childRefs, handleClick } = props;\n    const { results, selectedIndex } = useStore();\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div id={`result-row-${id}`} className={[`autocomplete-concierge__section`, className].join(' ')} role=\"rowgroup\">\n            <h2 className=\"autocomplete-concierge__section-title\">{label}</h2>\n            {results[templateId] &&\n                results[templateId].map((data, index) =>\n                    partial({\n                        data,\n                        index,\n                        handleClick,\n                        selectedIndex,\n                        childRefs,\n                    })\n                )}\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nPeople.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n};\n\nPeople.defaultProps = {\n    label: ``,\n    className: ``,\n};\n"],"names":["People","props","id","label","className","templateId","childRefs","handleClick","results","selectedIndex","useStore","length","join","role","map","data","index","action","disp","listMetadata","title","peopleFirstName","peopleLastName","ref","key","onClick","e","onKeyDown","tabIndex","href","peopleDepartment","replace","peoplePhone","peopleEmail","partial","string","number","func","PropTypes","propTypes","isRequired","defaultProps"],"sourceRoot":""}