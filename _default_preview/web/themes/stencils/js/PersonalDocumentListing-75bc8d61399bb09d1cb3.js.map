{"version":3,"file":"js/PersonalDocumentListing-75bc8d61399bb09d1cb3.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_global/js/formatBytes.js","webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/personal-document-listing/jsx/Message.jsx","webpack://Plug-and-Play-Template/./src/modules/personal-document-listing/jsx/FileIcon.jsx","webpack://Plug-and-Play-Template/./src/modules/personal-document-listing/jsx/PersonalDocumentListing.jsx"],"sourcesContent":["/**\n * Funtion that takes a size in bytes and formats it in a human redable way (e.g 200MB etc)\n * @param {int} bytes - The size in bytes\n * @returns {string} - The formatted size as a string\n */\nfunction formatBytes(bytes) {\n    // Check that bytes is a number\n    if (bytes === undefined || typeof bytes !== 'number') {\n        throw new Error('Please ensure that bytes is passed as a number');\n    }\n\n    // Define our sizes\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n    // Catch statement\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n\n    // Check how many lots of 1024 bytes we are dealing with\n    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);\n\n    // Return our formatted string\n    return `${Math.round(bytes / 1024 ** i, 2)} ${sizes[i]}`;\n}\n\nexport default formatBytes;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nfunction CardHeading({\n    children,\n    toggleIsCollapsed,\n    isCollapsed,\n    isCollapsible,\n    id,\n}) {\n    if (isCollapsible) {\n        return (\n            <button\n                className=\"collapsible-card__header\"\n                type=\"button\"\n                onClick={toggleIsCollapsed}\n                aria-expanded={!isCollapsed}\n                aria-controls={`content-${id}`}\n            >\n                {children}\n            </button>\n        );\n    }\n\n    return <div className=\"collapsible-card__header\">{children}</div>;\n}\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsible,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsible-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsible-card__contents',\n        contentClasses,\n        isScrollable && 'collapsible-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsible-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <CardHeading\n                isCollapsible={isCollapsible}\n                toggleIsCollapsed={toggleIsCollapsed}\n                isCollapsed={isCollapsed}\n                id={id}\n            >\n                <h2 className=\"collapsible-card__header-text\">{title}</h2>\n                {(subTitle || isCollapsible || headingIcon) && (\n                    <div className=\"collapsible-card__header-right\">\n                        {subTitle && (\n                            <h3 className=\"collapsible-card__header-text collapsible-card__header-text--sub-title\">\n                                {subTitle}\n                            </h3>\n                        )}\n                        {isCollapsible && (\n                            <svg\n                                className={`${collapseClass} collapsible-card__more-menu-icon`}\n                            >\n                                <title>\n                                    {isCollapsed\n                                        ? `Expand panel`\n                                        : `Collapse panel`}\n                                </title>\n                                <use href=\"#chevron\" />\n                            </svg>\n                        )}\n                        {headingIcon}\n                    </div>\n                )}\n            </CardHeading>\n            {(isCollapsible !== true ||\n                (isCollapsible === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function Message({ children, className }) {\n    return (\n        <div className={`personal-document-listing-message ${className}`}>\n            <div className=\"personal-document-listing-message__body\">\n                <div className=\"personal-document-listing-message__icon\">\n                    <svg className=\"svg-icon svg-icon--xlarge personal-document-listing-message__icon-file\">\n                        <use href=\"#file-anyfile\" />\n                    </svg>\n                    <svg className=\"svg-icon personal-document-listing-message__icon-block\">\n                        <use href=\"#error\" />\n                    </svg>\n                </div>\n                <div className=\"personal-document-listing-message__content\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function FileIcon({ document }) {\n    const { customIcon, customIconLabel, fileType } = document;\n\n    let svgLabel = '';\n    let svgRef = 'file-type=default';\n\n    if (fileType) {\n        switch (fileType) {\n            case 'doc':\n            case 'docx':\n            case 'document':\n                svgLabel = 'Document';\n                svgRef = 'file-type=docs';\n                break;\n\n            case 'xls':\n            case 'xlsx':\n            case 'spreadsheet':\n                svgLabel = 'Spreadsheet';\n                svgRef = 'file-type=sheets';\n                break;\n\n            case 'ppt':\n            case 'pptx':\n            case 'presentation':\n                svgLabel = 'Presentation';\n                svgRef = 'file-type=presentations';\n                break;\n\n            case 'pdf':\n                svgLabel = 'PDF';\n                svgRef = 'file-type=pdf';\n                break;\n\n            default:\n                svgLabel = fileType;\n        }\n    }\n\n    if (customIcon) {\n        return (\n            <img\n                src={customIcon}\n                alt={customIconLabel || svgLabel}\n                className=\"personal-document-listing-item__icon-image\"\n            />\n        );\n    }\n\n    return (\n        <svg aria-label={svgLabel} className=\"svg-icon svg-icon--small\">\n            <use href={`#${svgRef}`} />\n        </svg>\n    );\n}\n","import React, { useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { format as formatDate } from 'date-fns';\n\nimport formatBytes from 'PlugAndPlay/_global/js/formatBytes';\nimport Card from '../../collapsible-card/jsx/Card';\n\nimport PersonalDocumentListingContext, {\n    PersonalDocumentListingContextErrorType as ErrorType,\n} from './data/PersonalDocumentListingContext';\n\nimport Message from './Message';\nimport FileIcon from './FileIcon';\n\nimport '../css/personalDocumentListing.scss';\n\nexport default function PersonalDocumentListing({\n    title,\n    numberOfDocuments,\n    allDocumentsLabel,\n    allDocumentsLinkOverride,\n}) {\n    // Get our data from the context\n    const {\n        isLoading,\n        isAuthNeeded,\n        signInLink,\n        isReady,\n        error,\n        documents,\n        getDocuments,\n        allDocumentsLink,\n    } = useContext(PersonalDocumentListingContext);\n\n    useEffect(() => {\n        if (isReady) {\n            getDocuments({ count: numberOfDocuments });\n        }\n    }, [isReady, numberOfDocuments]);\n\n    let errorType = '';\n    let errorContents;\n    if (error) {\n        if (error === ErrorType.AUTH_ERROR) {\n            errorType = 'auth';\n            errorContents = (\n                <span className=\"personal-document-listing-error__message\">\n                    An error has occurred in authenticating your user account.\n                </span>\n            );\n        } else if (error === ErrorType.POPUP_ERROR) {\n            errorType = 'popup';\n            errorContents = (\n                <span className=\"personal-document-listing-error\">\n                    An error has occurred in opening the authentication popup.\n                    Ensure popups are allowed and you are not closing the popup\n                    window.\n                </span>\n            );\n        } else if (error === ErrorType.SCOPE_ERROR) {\n            errorType = 'scope';\n            errorContents = (\n                <span className=\"personal-document-listing-error\">\n                    An error has occurred loading your recent documents, ensure\n                    you have approved the required\n                </span>\n            );\n        } else if (error === ErrorType.ERROR) {\n            errorType = 'error';\n            errorContents = (\n                <span className=\"personal-document-listing-error\">\n                    An error has occurred loading your recent documents.\n                </span>\n            );\n        }\n    }\n\n    return (\n        <Card\n            id=\"personalDocumentListing\"\n            isCollapsible\n            title={title}\n            contentClasses=\"personal-document-listing\"\n        >\n            {isLoading && (\n                <div className=\"personal-document-listing-loading\">\n                    <div className=\"personal-document-listing-loading__label\">\n                        Loading...\n                    </div>\n                    {[...Array(numberOfDocuments)].map((value, index) => {\n                        return (\n                            <div\n                                // eslint-disable-next-line react/no-array-index-key\n                                key={index}\n                                className=\"personal-document-listing-loading__shadow\"\n                            />\n                        );\n                    })}\n                </div>\n            )}\n\n            {isAuthNeeded && (\n                <Message className=\"personal-document-listing-sign-in\">\n                    <div className=\"personal-document-listing-sign-in__message\">\n                        <div className=\"personal-document-listing-sign-in__title\">\n                            No files available\n                        </div>\n                        {signInLink}\n                    </div>\n                </Message>\n            )}\n\n            {error && (\n                <Message\n                    className={`personal-document-listing-error personal-document-listing-error--${errorType}`}\n                >\n                    {errorContents}\n                </Message>\n            )}\n\n            {isReady && !isAuthNeeded && !isLoading && !error && (\n                <>\n                    <ol className=\"personal-document-listing__list\">\n                        {documents.map((document) => {\n                            return (\n                                <li\n                                    key={document.id}\n                                    className=\"personal-document-listing-item\"\n                                >\n                                    <div className=\"personal-document-listing-item__icon\">\n                                        <FileIcon document={document} />\n                                    </div>\n                                    <a\n                                        href={document.url}\n                                        className=\"personal-document-listing-item__title\"\n                                    >\n                                        {document.title}\n                                    </a>\n                                    <div className=\"personal-document-listing-item__last-modified\">\n                                        <div className=\"personal-document-listing-item__last-modified-date\">\n                                            {document.lastModifiedDate && (\n                                                <>\n                                                    <span className=\"sr-only\">\n                                                        Modified on\n                                                    </span>\n                                                    {formatDate(\n                                                        document.lastModifiedDate,\n                                                        'd MMM yyyy'\n                                                    )}\n                                                </>\n                                            )}\n                                        </div>\n                                        {document.lastModifiedBy && (\n                                            <div className=\"personal-document-listing-item__last-modified-by\">\n                                                Modified by{' '}\n                                                {document.lastModifiedBy}\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className=\"personal-document-listing-item__size\">\n                                        {document.fileSize &&\n                                            formatBytes(document.fileSize)}\n\n                                        {!document.fileSize && <>&ndash;</>}\n                                    </div>\n                                </li>\n                            );\n                        })}\n                    </ol>\n                    <div className=\"personal-document-listing__footer\">\n                        <a\n                            href={allDocumentsLinkOverride || allDocumentsLink}\n                            target=\"_blank\"\n                            className=\"personal-document-listing__all-documents\"\n                            rel=\"noreferrer\"\n                        >\n                            <svg\n                                aria-label=\"Opens in new window\"\n                                className=\"svg-icon svg-icon--small\"\n                            >\n                                <use href=\"#external\" />\n                            </svg>\n                            {allDocumentsLabel}\n                        </a>\n                    </div>\n                </>\n            )}\n        </Card>\n    );\n}\n\nPersonalDocumentListing.propTypes = {\n    title: PropTypes.string,\n    numberOfDocuments: PropTypes.number,\n    allDocumentsLabel: PropTypes.string,\n    allDocumentsLinkOverride: PropTypes.string,\n};\n\nPersonalDocumentListing.defaultProps = {\n    title: 'Personal Document Listing',\n    numberOfDocuments: 5,\n    allDocumentsLabel: 'Check all documents on cloud',\n    allDocumentsLinkOverride: '',\n};\n"],"names":["bytes","undefined","Error","i","parseInt","Math","floor","log","round","CardHeading","children","toggleIsCollapsed","isCollapsed","isCollapsible","id","className","type","onClick","Card","props","wrapperClasses","contentClasses","headingIcon","isInitialCollapsed","isScrollable","subTitle","title","rest","storageId","storageIsCollapsed","localStorage","getItem","setCollapsed","useState","wrapperClass","join","contentClass","collapseClass","useCallback","setItem","href","role","tabIndex","Message","FileIcon","document","customIcon","customIconLabel","fileType","svgLabel","svgRef","src","alt","PersonalDocumentListing","numberOfDocuments","allDocumentsLabel","allDocumentsLinkOverride","isLoading","isAuthNeeded","signInLink","isReady","error","documents","getDocuments","allDocumentsLink","useContext","PersonalDocumentListingContext","useEffect","count","errorContents","errorType","ErrorType","Array","map","value","index","key","url","lastModifiedDate","formatDate","lastModifiedBy","fileSize","formatBytes","target","rel","propTypes","PropTypes","defaultProps"],"sourceRoot":""}