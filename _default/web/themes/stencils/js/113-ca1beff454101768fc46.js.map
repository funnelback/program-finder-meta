{"version":3,"file":"js/113-ca1beff454101768fc46.js","mappings":"2OAmCe,SAASA,EAAQC,GAC5B,MAAM,GAAEC,EAAE,MAAEC,EAAK,UAAEC,EAAS,WAAEC,EAAU,UAAEC,EAAS,YAAEC,GAAgBN,GAC/D,QAAEO,EAAO,cAAEC,EAAa,MAAEC,IAAUC,EAAAA,EAAAA,KAE1C,OAAKH,EAAQH,IAA8C,IAA/BG,EAAQH,GAAYO,OAK5C,uBAAKV,GAAK,cAAaA,IAAME,UAAW,CAAE,kCAAkCA,GAAWS,KAAK,KAAMC,KAAK,OACnG,uBAAKA,KAAK,WAAWV,UAAU,wCAC3B,sBAAIF,GAAG,gBAAgBE,UAAU,yCAC5BD,GAEL,sBAAID,GAAK,cAAaA,IAAMY,KAAK,UAAU,kBAAgB,gBAAgBV,UAAU,wCAChFI,EAAQH,IACLG,EAAQH,GAAYU,KAAI,CAACC,EAAMC,IA7CvD,SAAiB,GAA+D,IAA/D,MAAEA,EAAK,KAAED,EAAI,MAAEN,EAAK,cAAED,EAAa,YAAEF,EAAW,UAAED,GAAW,EAC1E,MAAMY,EAAQ,IAAIC,OAAQ,IAAGT,KAAU,OAG/BU,KAAMC,GAAeL,EAEvBM,EAAQ,4BAA2BD,EAAWE,QAAQL,EAJ1C,sEAQZM,EAAYC,IAAAA,SAAmBH,GAErC,OACI,sBACII,IAAKpB,EACLQ,KAAK,SACL,aAAa,GAAEO,IACfnB,GAAK,GAAEe,IACPU,IAAM,WAAUV,IAChB,gBAAeR,IAAkBQ,EACjCb,UAAU,iGACVwB,QAAUC,GAAMtB,EAAYsB,EAAGR,GAC/BS,UAAYD,GAAMtB,EAAYsB,EAAGR,GACjCU,UAAW,EACXC,wBAAyB,CAAEC,OAAQT,IAG/C,CAmB4BU,CAAQ,CACJjB,QACAD,OACAN,QACAD,gBACAF,cACAD,mBAlBjB,IAyBf,CAEA,MAAM,OAAE6B,EAAM,OAAEC,EAAM,KAAEC,GAASC,IAEjCtC,EAAQuC,UAAY,CAChBrC,GAAIiC,EAAOK,WACXrC,MAAOgC,EACP/B,UAAW+B,EACX9B,WAAY+B,EAAOI,WACnBlC,UAAW+B,EAAKG,WAChBjC,YAAa8B,GAGjBrC,EAAQyC,aAAe,CACnBtC,MAAQ,GACRC,UAAY,GACZG,YAAa,O","sources":["webpack://template-stencils/./src/modules/autocomplete-concierge/jsx/templates/organic.jsx"],"sourcesContent":["/* eslint-disable react/no-danger */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DOMPurify from 'dompurify';\nimport { useStore } from '../StoreProvider';\n\nfunction partial({ index, data, query, selectedIndex, handleClick, childRefs }) {\n    const regex = new RegExp(`(${query})`, 'gi');\n    const highlight = '<span class=\"autocomplete-concierge__highlight\">$1</span>';\n\n    const { disp: suggestion } = data;\n\n    const item = `<span aria-hidden=\"true\">${suggestion.replace(regex, highlight)}</span>`;\n\n    // The 'item' value comes from an external resource so even though normally all\n    // the HTML is generated here and can be trusted the 'item' value cannot.\n    const cleanHtml = DOMPurify.sanitize(item);\n\n    return (\n        <li\n            ref={childRefs}\n            role=\"option\"\n            aria-label={`${suggestion}`}\n            id={`${index}`}\n            key={`organic-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item autocomplete-concierge__search-result-item--organic\"\n            onClick={(e) => handleClick(e, suggestion)}\n            onKeyDown={(e) => handleClick(e, suggestion)}\n            tabIndex={-1}\n            dangerouslySetInnerHTML={{ __html: cleanHtml }}\n        />\n    );\n}\n\nexport default function Organic(props) {\n    const { id, label, className, templateId, childRefs, handleClick } = props;\n    const { results, selectedIndex, query } = useStore();\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div id={`result-row-${id}`} className={[`autocomplete-concierge__section`, className].join(' ')} role=\"row\">\n            <div role=\"gridcell\" className=\"autocomplete-concierge__section-grid\">\n                <h2 id=\"organic-label\" className=\"autocomplete-concierge__section-title\">\n                    {label}\n                </h2>\n                <ul id={`result-row-${id}`} role=\"listbox\" aria-labelledby=\"organic-label\" className=\"autocomplete-concierge__section-list\">\n                    {results[templateId] &&\n                        results[templateId].map((data, index) =>\n                            partial({\n                                index,\n                                data,\n                                query,\n                                selectedIndex,\n                                handleClick,\n                                childRefs,\n                            })\n                        )}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nOrganic.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n    handleClick: func,\n};\n\nOrganic.defaultProps = {\n    label: ``,\n    className: ``,\n    handleClick: () => {},\n};\n"],"names":["Organic","props","id","label","className","templateId","childRefs","handleClick","results","selectedIndex","query","useStore","length","join","role","map","data","index","regex","RegExp","disp","suggestion","item","replace","cleanHtml","DOMPurify","ref","key","onClick","e","onKeyDown","tabIndex","dangerouslySetInnerHTML","__html","partial","string","number","func","PropTypes","propTypes","isRequired","defaultProps"],"sourceRoot":""}