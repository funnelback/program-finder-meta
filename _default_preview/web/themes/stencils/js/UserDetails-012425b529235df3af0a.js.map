{"version":3,"file":"js/UserDetails-012425b529235df3af0a.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/edify-user/jsx/UserDetailsContent.jsx","webpack://Plug-and-Play-Template/./src/modules/edify-user/jsx/UserDetails.jsx","webpack://Plug-and-Play-Template/./src/modules/popover/jsx/popover.jsx"],"sourcesContent":["import React from 'react';\nimport { student } from 'PlugAndPlay/edify/js/getStudentMemoized';\n\nexport default function UserDetailsContent({\n    closeModal,\n    firstName,\n    lastName,\n    lmsStudentid,\n    studentDataUrlPrefix,\n    hasError,\n}) {\n    function logoutUser() {\n        // Get all the items from local storage\n        const localStorageKeys = Object.keys(localStorage);\n        // For each of the keys delete the item\n        localStorageKeys.forEach((item) => {\n            localStorage.removeItem(item);\n        });\n\n        // Get all the items from session storage\n        const sessionStorageKeys = Object.keys(sessionStorage);\n        // For each of the keys delete the item\n        sessionStorageKeys.forEach((item) => {\n            sessionStorage.removeItem(item);\n        });\n\n        // Clear the memoized student\n        student.clearMemoization();\n\n        // Reload the current page\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    if (hasError) {\n        return (\n            <div className=\"user\">\n                <div className=\"user-details\">\n                    <p>\n                        Looks like something has gone wrong. Please try\n                        reloading the page\n                    </p>\n                    <button\n                        className=\"user-details__list-item-button\"\n                        type=\"button\"\n                        onClick={logoutUser}\n                    >\n                        Logout\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"user\">\n            <div className=\"user-details\">\n                <div className=\"user-details__header\">\n                    {firstName} {lastName}\n                    <button\n                        className=\"user-details__header-button\"\n                        type=\"button\"\n                        onClick={closeModal}\n                    >\n                        <span className=\"sr-only\">Close</span>\n                        <svg className=\"user-details__header-button-icon\">\n                            <use href=\"#close\" />\n                        </svg>\n                    </button>\n                </div>\n                <ul className=\"user-details__list\">\n                    <li className=\"user-details__list-item\">\n                        <a\n                            className=\"user-details__list-item-link\"\n                            href={`${studentDataUrlPrefix}${lmsStudentid}`}\n                        >\n                            View profile information\n                        </a>\n                    </li>\n                    <li className=\"user-details__list-item\">\n                        <button\n                            className=\"user-details__list-item-button\"\n                            type=\"button\"\n                            onClick={logoutUser}\n                        >\n                            Logout\n                        </button>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useContext, useEffect } from 'react';\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport { watchModals } from '@react-aria/aria-modal-polyfill';\nimport { OverlayProvider } from '@react-aria/overlays';\n\nimport Popover from '../../popover/jsx/popover';\nimport UserDetailsContext from './data/UserDetailsContext';\nimport UserDetailsContent from './UserDetailsContent';\n\n/**\n * User Details\n */\nexport default function UserDetails({ popover, studentDataUrlPrefix }) {\n    watchModals();\n\n    const titleId = uuidv4();\n    const { userDetails, getUserDetails, hasError } =\n        useContext(UserDetailsContext);\n\n    useEffect(() => {\n        getUserDetails();\n    }, []);\n\n    const { firstName, lastName, lmsStudentid } = userDetails;\n\n    const content = (\n        <UserDetailsContent\n            firstName={firstName}\n            lastName={lastName}\n            lmsStudentid={lmsStudentid}\n            studentDataUrlPrefix={studentDataUrlPrefix}\n            hasError={hasError}\n        />\n    );\n\n    return (\n        <>\n            <OverlayProvider className=\"no-wysiwyg users-wrapper\">\n                {popover && (\n                    <Popover\n                        titleId={titleId}\n                        trigger={({ props, ref }) => {\n                            return (\n                                <button\n                                    ref={ref}\n                                    {...props}\n                                    type=\"button\"\n                                    className=\"users-wrapper__action\"\n                                >\n                                    <svg className=\"svg-icon\">\n                                        <title>View user details</title>\n                                        <use href=\"#user-avatar\" />\n                                    </svg>\n                                    <div className=\"users-wrapper__name\">\n                                        {firstName} {lastName}\n                                    </div>\n                                </button>\n                            );\n                        }}\n                        className=\"users-popover\"\n                    >\n                        {content}\n                    </Popover>\n                )}\n                {!popover && content}\n            </OverlayProvider>\n        </>\n    );\n}\n","/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    OverlayContainer,\n    DismissButton,\n    useOverlayTrigger,\n    useOverlayPosition,\n    useOverlay,\n    useModal,\n} from '@react-aria/overlays';\nimport { useButton } from '@react-aria/button';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\n\nconst OTHER_OVERLAY_CONTAINER_OPEN =\n    '[data-overlay-container]:not([aria-hidden=\"true\"])';\nconst AIRA_HIDDEN = '[aria-hidden=\"true\"]';\n\nconst PopoverContent = React.forwardRef(\n    (\n        {\n            triggerRef,\n            titleId,\n            title,\n            children,\n            isOpen,\n            onClose,\n            className,\n            ...otherProps\n        },\n        ref\n    ) => {\n        // Handle interacting outside the dialog and pressing the Escape key to close the modal.\n        const { overlayProps } = useOverlay(\n            {\n                onClose,\n                isOpen,\n                isDismissable: true,\n                shouldCloseOnInteractOutside: (element) => {\n                    /*\n                        Framework tries to cancels all events on the basis that there is an 'overlay' showing\n                        which should swallow the events, except it doesnt work consistently and will allow most\n                        onClick bound events though and only block other usage from the @react-aria framework\n                        like other popover openers.\n                    */\n\n                    // If content within the popover has cause ANOTHER overlay to open we dont want to close\n                    // this one just because its being interacted with somehow.\n                    if (\n                        element.closest(OTHER_OVERLAY_CONTAINER_OPEN) &&\n                        !element.closest(AIRA_HIDDEN)\n                    ) {\n                        return false;\n                    }\n\n                    // If the click is on the popover trigger just let it through so the popover doesnt re-open itself\n                    if (triggerRef.current.contains(element)) {\n                        return true;\n                    }\n\n                    onClose(); // Close the popover\n                    return false; // But let the click / press event cascade\n                },\n            },\n            ref\n        );\n\n        // Hide content outside the modal from screen readers.\n        const { modalProps } = useModal();\n\n        // Get props for the dialog and its title\n        const { dialogProps, titleProps } = useDialog(\n            { 'aria-describedby': titleId },\n            ref\n        );\n\n        return (\n            <FocusScope contain restoreFocus>\n                <div\n                    {...mergeProps(\n                        overlayProps,\n                        dialogProps,\n                        otherProps,\n                        modalProps\n                    )}\n                    ref={ref}\n                    className={`popover__dialog ${className}__dialog`}\n                >\n                    {/* Include a title only if a titleId is not provided */}\n                    {titleId ? (\n                        ''\n                    ) : (\n                        <h2\n                            {...titleProps}\n                            className={`popover__title ${className}__title`}\n                        >\n                            {title}\n                        </h2>\n                    )}\n\n                    {children}\n                    <DismissButton onDismiss={onClose} />\n                </div>\n            </FocusScope>\n        );\n    }\n);\n\n/**\n * Create an ARIA / WCAG compatable popover using @react-aria\n * Modified from: https://react-spectrum.adobe.com/react-aria/useOverlayTrigger.html\n *\n * @param {string} titleId - (optional) Id of an element in the children element to act as dialog title; if not provided 'title' must be.\n * @param {string} title - (optional) Title of the dialog; if not provided 'titleId' must be.\n * @param {function} trigger - Callback function to generate the trigger button for the popover\n * @param {string} className - Class to pre-pend to all internal className definitions\n * @param {string} children - Content of the Popover\n * @returns {JSX.Element}\n */\nexport default function Popover({\n    titleId,\n    title,\n    placement,\n    trigger,\n    className,\n    children,\n}) {\n    // Implementing useOverlayTriggerState so i dont have to add another dependency\n    const [isOpen, setIsOpen] = useState(false);\n\n    const triggerRef = React.useRef();\n    const overlayRef = React.useRef();\n\n    // Get props for the trigger and overlay. This also handles hiding the overlay when a parent element of the trigger scrolls (which invalidates the popover positioning).\n    const { triggerProps, overlayProps } = useOverlayTrigger(\n        { type: 'dialog' },\n        {\n            isOpen,\n        },\n        triggerRef\n    );\n\n    // Get popover positioning props relative to the trigger\n    const { overlayProps: positionProps } = useOverlayPosition({\n        targetRef: triggerRef,\n        overlayRef,\n        placement: placement || 'bottom right',\n        offset: 5,\n        isOpen,\n    });\n\n    // Let the CSS and template decide the correct z-index\n    delete positionProps.style.zIndex;\n\n    // Move properties into CSS variables to make altering them easier\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of Object.entries(positionProps.style)) {\n        // eslint-disable-next-line no-restricted-globals\n        positionProps.style[`--popover-${key}`] = !isNaN(value)\n            ? `${value}px`\n            : value;\n\n        delete positionProps.style[key];\n    }\n\n    const { buttonProps } = useButton(\n        {\n            onPress: () => setIsOpen(true),\n        },\n        triggerRef\n    );\n\n    // Get the trigger element from the parent\n    const triggerElement = trigger({\n        props: { ...mergeProps(buttonProps, triggerProps) },\n        ref: triggerRef,\n    });\n\n    return (\n        <>\n            {triggerElement}\n            {isOpen && (\n                <OverlayContainer className={`popover ${className}`}>\n                    <PopoverContent\n                        {...overlayProps}\n                        {...positionProps}\n                        ref={overlayRef}\n                        triggerRef={triggerRef}\n                        titleId={titleId}\n                        title={title}\n                        isOpen\n                        onClose={() => {\n                            setIsOpen(false);\n                        }}\n                        className={className}\n                    >\n                        {/* Clone the children so we can pass the closeModal function to them */}\n                        {cloneElement(children, {\n                            closeModal: () => setIsOpen(false),\n                        })}\n                    </PopoverContent>\n                </OverlayContainer>\n            )}\n        </>\n    );\n}\n\nPopover.propTypes = {\n    titleId: PropTypes.string,\n    title: PropTypes.string,\n    trigger: PropTypes.func,\n    className: PropTypes.string,\n};\n\nPopover.defaultProps = {\n    titleId: '',\n    title: 'popover',\n    trigger: ({ props, ref }) => {\n        return (\n            <button {...props} ref={ref}>\n                Open popover\n            </button>\n        );\n    },\n    className: 'popover',\n};\n"],"names":["UserDetailsContent","closeModal","firstName","lastName","lmsStudentid","studentDataUrlPrefix","hasError","logoutUser","Object","keys","localStorage","forEach","item","removeItem","sessionStorage","student","location","reload","className","type","onClick","href","UserDetails","popover","watchModals","titleId","uuidv4","userDetails","getUserDetails","useContext","UserDetailsContext","useEffect","content","trigger","props","ref","PopoverContent","React","triggerRef","title","children","isOpen","onClose","otherProps","overlayProps","useOverlay","isDismissable","shouldCloseOnInteractOutside","element","closest","current","contains","modalProps","useModal","dialogProps","titleProps","useDialog","contain","restoreFocus","mergeProps","onDismiss","Popover","placement","setIsOpen","useState","overlayRef","triggerProps","useOverlayTrigger","positionProps","useOverlayPosition","targetRef","offset","style","zIndex","key","value","entries","isNaN","buttonProps","useButton","onPress","triggerElement","cloneElement","propTypes","PropTypes","defaultProps"],"sourceRoot":""}