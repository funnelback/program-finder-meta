{"version":3,"file":"js/Notifications-44eadfb2f76018f558a0.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./node_modules/@react-aria/button/dist/module.js","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/useDivButtonModalOpen.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/BaseNotification.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/Announcement.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/Assignment.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/NotificationFactory.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notificationList.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notifications.jsx","webpack://Plug-and-Play-Template/./src/modules/popover/jsx/popover.jsx"],"sourcesContent":["import {mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain} from \"@react-aria/utils\";\nimport {useFocusable as $cE0pI$useFocusable} from \"@react-aria/focus\";\nimport {usePress as $cE0pI$usePress} from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $701a24aa0da5b062$exports = {};\n\n$parcel$export($701a24aa0da5b062$exports, \"useButton\", () => $701a24aa0da5b062$export$ea18c227d4417cc3);\n\n\n\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n    let { elementType: elementType = 'button' , isDisabled: isDisabled , onPress: onPress , onPressStart: onPressStart , onPressEnd: onPressEnd , onPressChange: onPressChange , preventFocusOnPress: // @ts-ignore - undocumented\n    preventFocusOnPress , allowFocusWhenDisabled: // @ts-ignore - undocumented\n    allowFocusWhenDisabled , // @ts-ignore\n    onClick: deprecatedOnClick , href: href , target: target , rel: rel , type: type = 'button'  } = props;\n    let additionalProps;\n    if (elementType === 'button') additionalProps = {\n        type: type,\n        disabled: isDisabled\n    };\n    else additionalProps = {\n        role: 'button',\n        tabIndex: isDisabled ? undefined : 0,\n        href: elementType === 'a' && isDisabled ? undefined : href,\n        target: elementType === 'a' ? target : undefined,\n        type: elementType === 'input' ? type : undefined,\n        disabled: elementType === 'input' ? isDisabled : undefined,\n        'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n        rel: elementType === 'a' ? rel : undefined\n    };\n    let { pressProps: pressProps , isPressed: isPressed  } = $cE0pI$usePress({\n        onPressStart: onPressStart,\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled,\n        preventFocusOnPress: preventFocusOnPress,\n        ref: ref\n    });\n    let { focusableProps: focusableProps  } = $cE0pI$useFocusable(props, ref);\n    if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n    let buttonProps = $cE0pI$mergeProps(focusableProps, pressProps, $cE0pI$filterDOMProps(props, {\n        labelable: true\n    }));\n    return {\n        isPressed: isPressed,\n        buttonProps: $cE0pI$mergeProps(additionalProps, buttonProps, {\n            'aria-haspopup': props['aria-haspopup'],\n            'aria-expanded': props['aria-expanded'],\n            'aria-controls': props['aria-controls'],\n            'aria-pressed': props['aria-pressed'],\n            onClick: (e)=>{\n                if (deprecatedOnClick) {\n                    deprecatedOnClick(e);\n                    console.warn('onClick is deprecated, please use onPress');\n                }\n            }\n        })\n    };\n}\n\n\nvar $55f54f7887471b58$exports = {};\n\n$parcel$export($55f54f7887471b58$exports, \"useToggleButton\", () => $55f54f7887471b58$export$51e84d46ca0bc451);\n\n\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n    const { isSelected: isSelected  } = state;\n    const { isPressed: isPressed , buttonProps: buttonProps  } = $701a24aa0da5b062$export$ea18c227d4417cc3({\n        ...props,\n        onPress: $cE0pI$chain(state.toggle, props.onPress)\n    }, ref);\n    return {\n        isPressed: isPressed,\n        buttonProps: $cE0pI$mergeProps(buttonProps, {\n            'aria-pressed': isSelected\n        })\n    };\n}\n\n\n\n\nexport {$701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton};\n//# sourceMappingURL=module.js.map\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable import/prefer-default-export */\nimport { useRef, useState } from 'react';\nimport { useButton } from '@react-aria/button';\n/**\n * @returns Hooks to open and close the modal dialog from interacting with the a div rather than a button\n */\nexport default function useDivButtonModalOpen() {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const openModalRef = useRef();\n\n    let { buttonProps: modalOpenProps } = useButton(\n        {\n            onPress: () => setIsModalOpen(true),\n        },\n        openModalRef\n    );\n\n    // Add our own fields\n    modalOpenProps = {\n        ...modalOpenProps,\n        role: 'button',\n        tabIndex: '0',\n        'aria-label': 'Open in modal',\n    };\n    delete modalOpenProps.type;\n\n    return {\n        openModalRef, // useRef\n        modalOpenProps, // useKeyboard\n        isModalOpen, // useState get\n        setIsModalOpen, // useState set\n    };\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function BaseNotification(args) {\n    const { title, subtitle, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <h2 className=\"notification-content__title\">{title}</h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    {subtitle ? (\n                        <div className=\"notification-content__subtitle\">\n                            {title}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <BaseNotificationModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function BaseNotificationModal({\n    type,\n    title,\n    subtitle,\n    createdDate,\n    body,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal\n            titleId={titleId}\n            onClose={(e) => {\n                handleModalClose(e);\n            }}\n        >\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {title}\n                    </h2>\n                </header>\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {subtitle ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            {subtitle}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n                </div>\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function Announcement(args) {\n    const { title, course, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#edify-announcement\" />\n                    </svg>\n                    <h2 className=\"notification-content__title\">\n                        {course ? `${course} | ` : ''}Announcement\n                    </h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    <div className=\"notification-content__subtitle\">\n                        {title}\n                    </div>\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <AnnouncementModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function AnnouncementModal({\n    type,\n    title,\n    course,\n    createdDate,\n    body,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal titleId={titleId} onClose={handleModalClose}>\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#edify-announcement\" />\n                    </svg>\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {course ? `${course} | ` : ''} Announcement\n                    </h2>\n                </header>\n\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {title ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            {title}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n                </div>\n\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { format, formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function Assignment(args) {\n    const { title, course, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#edify-assignment\" />\n                    </svg>\n                    <h2 className=\"notification-content__title\">\n                        {course ? `${course} | ` : ''}Assignment\n                    </h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    {title && (\n                        <div className=\"notification-content__subtitle\">\n                            {title}\n                        </div>\n                    )}\n\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <AssignmentModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function AssignmentModal({\n    type,\n    course,\n    createdDate,\n    dueDate,\n    body,\n    externalLink,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const dueDateText = format(dueDate, 'dd MMM');\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal titleId={titleId} onClose={handleModalClose}>\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#edify-assignment\" />\n                    </svg>\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {course ? `${course} | ` : ''} Assignment\n                    </h2>\n                </header>\n\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {dueDate ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            Due {dueDateText}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n\n                    <a\n                        href={externalLink}\n                        className=\"notification-content-modal__link\"\n                    >\n                        <svg className=\"svg-icon svg-icon--small\">\n                            <title>External link</title>\n                            <use href=\"#external\" />\n                        </svg>\n                        View in Canvas\n                    </a>\n                </div>\n\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable import/prefer-default-export */\nimport React from 'react';\n\nimport BaseNotification from './BaseNotification';\nimport Announcement from './Announcement';\nimport Assignment from './Assignment';\n\nexport default function NotificationFactory(args) {\n    const { type } = args;\n    switch (type) {\n        case 'announcement':\n            return <Announcement {...args} />;\n        case 'assignment':\n            return <Assignment {...args} />;\n        default:\n            return <BaseNotification {...args} />;\n    }\n}\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport NotificationFactory from './notification-types/NotificationFactory';\n\nexport default function NotificationsList({\n    notifications,\n    showLimit,\n    pinnedList,\n    pinningAlowed,\n    setRead,\n    setPinned,\n}) {\n    let notificationsToRender = notifications;\n    let daysAgo = ''; // Keep track of when the date distance changes between notifications\n\n    if (showLimit > -1) {\n        notificationsToRender = notificationsToRender.slice(0, showLimit);\n    }\n\n    return notificationsToRender.map((notification, i) => {\n        const { pinned } = notification;\n        let showDaysSince = false;\n        let createDistance;\n\n        if (!pinnedList) {\n            createDistance = formatDistance(\n                notification.createdDate,\n                new Date(),\n                {\n                    addSuffix: true,\n                }\n            );\n\n            // Condense any distance less than a day into 'Today'\n            if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n                createDistance = 'Today';\n            }\n\n            // If the distance has changed from last notification add class to show visual X days/months ago line\n            if (daysAgo !== createDistance) {\n                showDaysSince = true;\n                daysAgo = createDistance;\n            }\n        }\n\n        return (\n            <li\n                key={`${notification.id}`}\n                className={`notification-item ${\n                    pinned ? 'notification-item--pinned' : ''\n                }`}\n            >\n                {/* If a pinned list is being printed use this heading */}\n                {i === 0 && pinnedList ? (\n                    <div className=\"notification-item__pinned\">\n                        {`Pinned (${notifications.length})`}\n                    </div>\n                ) : (\n                    <> </>\n                )}\n\n                {/* If is NOT a pinned list AND the date distance has changed use this heading */}\n                {!pinnedList && showDaysSince ? (\n                    <div className=\"notification-item__distance\">\n                        {createDistance}\n                    </div>\n                ) : (\n                    <> </>\n                )}\n\n                <div className=\"notification-item__body\">\n                    {/* Use a factory pattern to decide what the content of the notification looks like */}\n                    <NotificationFactory\n                        {...notification}\n                        onClick={() => {\n                            if (!notification.read) {\n                                setRead(notification);\n                            }\n                        }}\n                        onPin={() => setPinned(notification)}\n                        pinningAlowed={pinningAlowed}\n                    />\n\n                    {pinningAlowed ? (\n                        <button\n                            type=\"button\"\n                            onClick={() => setPinned(notification)}\n                            className={`notification-item__icon ${\n                                pinned ? 'notification-item__icon--pinned' : ''\n                            }`}\n                        >\n                            <svg className=\"svg-icon\">\n                                <title>\n                                    {pinned ? 'Unpin' : 'Pin'} notification\n                                </title>\n                                <use\n                                    href={pinned ? '#pin-filled' : '#pin-ghost'}\n                                />\n                            </svg>\n                        </button>\n                    ) : (\n                        <></>\n                    )}\n                </div>\n            </li>\n        );\n    });\n}\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\n\nimport NotificationsContext from './data/NotificationsContext';\nimport NotificationList from './notificationList';\nimport Popover from '../../popover/jsx/popover';\n\nimport '../css/_global.scss'; // Last so our CSS overrides any dependencies above\n\nexport default function Notifications({\n    popover,\n    title,\n    enablePinnedNotifications,\n    showUnreadIndicator,\n    notificationsLimit,\n    pinnedLimit,\n}) {\n    const {\n        notifications,\n        getNotifications,\n        isMoreNotifications,\n\n        pinnedNotifications,\n        getPinnedNotifications,\n        setPinned,\n\n        unreadNotificationsCount,\n        getUnreadNotificationsCount,\n        setRead,\n    } = useContext(NotificationsContext);\n\n    const [showAllPinned, setShowAllPinned] = useState(false);\n\n    // Initial data load\n    useEffect(() => {\n        // If pinning notifications is enabled\n        if (enablePinnedNotifications) {\n            getPinnedNotifications();\n        }\n        if (showUnreadIndicator) {\n            getUnreadNotificationsCount();\n        }\n        getNotifications({\n            max: notificationsLimit,\n            includePinned: !enablePinnedNotifications,\n        });\n    }, [enablePinnedNotifications, notificationsLimit]);\n\n    // Handlers for data change\n    const handleSetRead = useCallback(\n        (notification) => {\n            setRead({\n                ...notification,\n                read: true,\n            });\n        },\n        [setRead]\n    );\n    const handleSetPinned = useCallback(\n        (notification) => {\n            setPinned({\n                ...notification,\n                pinned: !notification.pinned,\n            });\n        },\n        [setPinned]\n    );\n\n    // All pinned notification are loaded up front but not all are shown, toggle them all visible or not\n    const handlePinnedShowMore = useCallback(() => {\n        setShowAllPinned(!showAllPinned);\n    }, [setShowAllPinned, showAllPinned]);\n\n    // The main notifications are paged based on the 'notificationsLimit input, grab the next page worth of notifications\n    const handleGetMoreNotifications = useCallback(() => {\n        getNotifications({\n            start: notifications.length,\n            max: notificationsLimit,\n            includePinned: !enablePinnedNotifications,\n        });\n    }, [notifications, notificationsLimit, enablePinnedNotifications]);\n\n    const titleId = uuidv4(); // Popover needs a id for the dialog described by\n    function NotificationsContentInner({ closeModal }) {\n        return (\n            <div className=\"no-wysiwyg notifications\">\n                <div className=\"notifications__header\">\n                    <h1 id={titleId} className=\"notifications__title\">\n                        {title}\n                    </h1>\n                    <button\n                        className=\"notifications__header-button\"\n                        type=\"button\"\n                        onClick={closeModal}\n                    >\n                        <span className=\"sr-only\">Close</span>\n                        <svg className=\"notifications__header-button-icon\">\n                            <use href=\"#close\" />\n                        </svg>\n                    </button>\n                </div>\n\n                <div className=\"notifications__body\">\n                    {enablePinnedNotifications &&\n                        pinnedNotifications.length > 0 && (\n                            <ul\n                                aria-label=\"Pinned notifications\"\n                                className=\"notifications__list\"\n                            >\n                                <NotificationList\n                                    notifications={pinnedNotifications}\n                                    showLimit={showAllPinned ? -1 : pinnedLimit}\n                                    showMore={handlePinnedShowMore}\n                                    pinnedList\n                                    pinningAlowed\n                                    setRead={handleSetRead}\n                                    setPinned={handleSetPinned}\n                                />\n                            </ul>\n                        )}\n\n                    {enablePinnedNotifications &&\n                        pinnedNotifications.length > pinnedLimit && (\n                            <button\n                                type=\"button\"\n                                onClick={handlePinnedShowMore}\n                                className=\"notifications__expand-pinned\"\n                            >\n                                <svg className=\"svg-icon\">\n                                    <use href=\"#add\" />\n                                </svg>\n                                Show {showAllPinned ? 'less' : 'more'} (\n                                {pinnedNotifications.length - pinnedLimit})\n                            </button>\n                        )}\n\n                    <ul\n                        aria-label=\"Notifications\"\n                        className=\"notifications__list\"\n                    >\n                        <NotificationList\n                            notifications={notifications}\n                            pinningAlowed={enablePinnedNotifications}\n                            setRead={handleSetRead}\n                            setPinned={handleSetPinned}\n                        />\n                    </ul>\n\n                    {isMoreNotifications && (\n                        <button\n                            type=\"button\"\n                            onClick={handleGetMoreNotifications}\n                            className=\"notifications__more\"\n                        >\n                            <svg className=\"svg-icon\">\n                                <use href=\"#add\" />\n                            </svg>\n                            Show more\n                        </button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    let notificationsContent = null;\n\n    if (popover) {\n        notificationsContent = (\n            <Popover\n                titleId={titleId}\n                trigger={({ props, ref }) => {\n                    return (\n                        <button\n                            ref={ref}\n                            {...props}\n                            type=\"button\"\n                            className=\"notifications-wrapper__action\"\n                        >\n                            {showUnreadIndicator &&\n                                unreadNotificationsCount > 0 && (\n                                    <div\n                                        aria-label=\"unread notifications\"\n                                        className=\"notifications-wrapper__unread\"\n                                    >\n                                        {unreadNotificationsCount}\n                                    </div>\n                                )}\n                            <svg className=\"svg-icon\">\n                                <title>View notifications</title>\n                                <use href=\"#edify-notification\" />\n                            </svg>\n                        </button>\n                    );\n                }}\n                className=\"notification-popover\"\n            >\n                <NotificationsContentInner />\n            </Popover>\n        );\n    }\n\n    return (\n        <OverlayProvider className=\"notifications-wrapper\">\n            {notificationsContent !== null ? (\n                notificationsContent\n            ) : (\n                <NotificationsContentInner />\n            )}\n        </OverlayProvider>\n    );\n}\n","/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    OverlayContainer,\n    DismissButton,\n    useOverlayTrigger,\n    useOverlayPosition,\n    useOverlay,\n    useModal,\n} from '@react-aria/overlays';\nimport { useButton } from '@react-aria/button';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\n\nimport '../css/_global.scss';\n\nconst OTHER_OVERLAY_CONTAINER_OPEN =\n    '[data-overlay-container]:not([aria-hidden=\"true\"])';\nconst AIRA_HIDDEN = '[aria-hidden=\"true\"]';\n\nconst PopoverContent = React.forwardRef(\n    (\n        {\n            triggerRef,\n            titleId,\n            title,\n            children,\n            isOpen,\n            onClose,\n            className,\n            ...otherProps\n        },\n        ref\n    ) => {\n        // Handle interacting outside the dialog and pressing the Escape key to close the modal.\n        const { overlayProps } = useOverlay(\n            {\n                onClose,\n                isOpen,\n                isDismissable: true,\n                shouldCloseOnInteractOutside: (element) => {\n                    /*\n                        Framework tries to cancels all events on the basis that there is an 'overlay' showing\n                        which should swallow the events, except it doesnt work consistently and will allow most\n                        onClick bound events though and only block other usage from the @react-aria framework\n                        like other popover openers.\n                    */\n\n                    // If content within the popover has cause ANOTHER overlay to open we dont want to close\n                    // this one just because its being interacted with somehow.\n                    if (\n                        element.closest(OTHER_OVERLAY_CONTAINER_OPEN) &&\n                        !element.closest(AIRA_HIDDEN)\n                    ) {\n                        return false;\n                    }\n\n                    // If the click is on the popover trigger just let it through so the popover doesnt re-open itself\n                    if (triggerRef.current.contains(element)) {\n                        return true;\n                    }\n\n                    onClose(); // Close the popover\n                    return false; // But let the click / press event cascade\n                },\n            },\n            ref\n        );\n\n        // Hide content outside the modal from screen readers.\n        const { modalProps } = useModal();\n\n        // Get props for the dialog and its title\n        const { dialogProps, titleProps } = useDialog(\n            { 'aria-describedby': titleId },\n            ref\n        );\n\n        return (\n            <FocusScope contain restoreFocus>\n                <div\n                    {...mergeProps(\n                        overlayProps,\n                        dialogProps,\n                        otherProps,\n                        modalProps\n                    )}\n                    ref={ref}\n                    className={`popover__dialog ${className}__dialog`}\n                >\n                    {/* Include a title only if a titleId is not provided */}\n                    {titleId ? (\n                        ''\n                    ) : (\n                        <h2\n                            {...titleProps}\n                            className={`popover__title ${className}__title`}\n                        >\n                            {title}\n                        </h2>\n                    )}\n\n                    {children}\n                    <DismissButton onDismiss={onClose} />\n                </div>\n            </FocusScope>\n        );\n    }\n);\n\n/**\n * Create an ARIA / WCAG compatable popover using @react-aria\n * Modified from: https://react-spectrum.adobe.com/react-aria/useOverlayTrigger.html\n *\n * @param {string} titleId - (optional) Id of an element in the children element to act as dialog title; if not provided 'title' must be.\n * @param {string} title - (optional) Title of the dialog; if not provided 'titleId' must be.\n * @param {function} trigger - Callback function to generate the trigger button for the popover\n * @param {string} className - Class to pre-pend to all internal className definitions\n * @param {string} children - Content of the Popover\n * @returns {JSX.Element}\n */\nexport default function Popover({\n    titleId,\n    title,\n    placement,\n    trigger,\n    className,\n    children,\n}) {\n    // Implementing useOverlayTriggerState so i dont have to add another dependency\n    const [isOpen, setIsOpen] = useState(false);\n\n    const triggerRef = React.useRef();\n    const overlayRef = React.useRef();\n\n    // Get props for the trigger and overlay. This also handles hiding the overlay when a parent element of the trigger scrolls (which invalidates the popover positioning).\n    const { triggerProps, overlayProps } = useOverlayTrigger(\n        { type: 'dialog' },\n        {\n            isOpen,\n        },\n        triggerRef\n    );\n\n    // Get popover positioning props relative to the trigger\n    const { overlayProps: positionProps } = useOverlayPosition({\n        targetRef: triggerRef,\n        overlayRef,\n        placement: placement || 'bottom right',\n        offset: 5,\n        isOpen,\n    });\n\n    // Let the CSS and template decide the correct z-index\n    delete positionProps.style.zIndex;\n\n    // Move properties into CSS variables to make altering them easier\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of Object.entries(positionProps.style)) {\n        // eslint-disable-next-line no-restricted-globals\n        positionProps.style[`--popover-${key}`] = !isNaN(value)\n            ? `${value}px`\n            : value;\n\n        delete positionProps.style[key];\n    }\n\n    const { buttonProps } = useButton(\n        {\n            onPress: () => setIsOpen(true),\n        },\n        triggerRef\n    );\n\n    // Get the trigger element from the parent\n    const triggerElement = trigger({\n        props: { ...mergeProps(buttonProps, triggerProps) },\n        ref: triggerRef,\n    });\n\n    return (\n        <>\n            {triggerElement}\n            {isOpen && (\n                <OverlayContainer className={`popover ${className}`}>\n                    <PopoverContent\n                        {...overlayProps}\n                        {...positionProps}\n                        ref={overlayRef}\n                        triggerRef={triggerRef}\n                        titleId={titleId}\n                        title={title}\n                        isOpen\n                        onClose={() => {\n                            setIsOpen(false);\n                        }}\n                        className={className}\n                    >\n                        {/* Clone the children so we can pass the closeModal function to them */}\n                        {cloneElement(children, {\n                            closeModal: () => setIsOpen(false),\n                        })}\n                    </PopoverContent>\n                </OverlayContainer>\n            )}\n        </>\n    );\n}\n\nPopover.propTypes = {\n    titleId: PropTypes.string,\n    title: PropTypes.string,\n    trigger: PropTypes.func,\n    className: PropTypes.string,\n};\n\nPopover.defaultProps = {\n    titleId: '',\n    title: 'popover',\n    trigger: ({ props, ref }) => {\n        return (\n            <button {...props} ref={ref}>\n                Open popover\n            </button>\n        );\n    },\n    className: 'popover',\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","additionalProps","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","deprecatedOnClick","href","target","rel","type","disabled","role","tabIndex","undefined","pressProps","isPressed","focusableProps","buttonProps","labelable","console","warn","$55f54f7887471b58$export$51e84d46ca0bc451","state","isSelected","toggle","Modal","titleId","title","onClose","children","className","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","isOpen","modalRef","React","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","useEffect","current","removeAttribute","focusFirst","hidden","useDivButtonModalOpen","isModalOpen","setIsModalOpen","useState","openModalRef","useRef","modalOpenProps","useButton","BaseNotification","args","subtitle","body","read","BaseNotificationModal","handleModalClose","createdDate","pinned","onPin","pinningAlowed","createDistance","formatDistance","Date","addSuffix","some","el","includes","uuidv4","id","Announcement","course","AnnouncementModal","Assignment","AssignmentModal","dueDate","externalLink","dueDateText","format","NotificationFactory","NotificationsList","notifications","showLimit","pinnedList","setRead","setPinned","notificationsToRender","daysAgo","slice","map","notification","i","showDaysSince","key","length","Notifications","popover","enablePinnedNotifications","showUnreadIndicator","notificationsLimit","pinnedLimit","getNotifications","isMoreNotifications","pinnedNotifications","getPinnedNotifications","unreadNotificationsCount","getUnreadNotificationsCount","useContext","NotificationsContext","showAllPinned","setShowAllPinned","max","includePinned","handleSetRead","useCallback","handleSetPinned","handlePinnedShowMore","handleGetMoreNotifications","start","NotificationsContentInner","closeModal","showMore","notificationsContent","trigger","PopoverContent","triggerRef","otherProps","shouldCloseOnInteractOutside","element","closest","contains","mergeProps","onDismiss","Popover","placement","setIsOpen","overlayRef","triggerProps","useOverlayTrigger","positionProps","useOverlayPosition","targetRef","offset","style","zIndex","value","entries","isNaN","triggerElement","cloneElement","propTypes","PropTypes","defaultProps"],"sourceRoot":""}